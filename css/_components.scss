@use 'util';
@use 'const';

/* Components
 * 
 * Component classes. Must be used only once.
 */
/* Flag list
 *
 * List of flags.
 */
.list-flags {
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: .5em
}

/* Theme switch control
 *
 * Set of theme switches.
 */
.theme-switches {
    display: flex;
    border-radius: .25em;
    @include util.basic-border(1px);

    input {
        @include util.absolute-fill();
        opacity: 0;
    }

    label {
        position: relative;
        padding: .25em;
        width: 2em;
        display: flex;
        align-items: center;
        justify-content: center;

        &:last-of-type {
            border-top-right-radius: inherit;
            border-bottom-right-radius: inherit;
        }

        &:first-of-type {
            border-top-left-radius: inherit;
            border-bottom-left-radius: inherit;
        }

        &:has(input#{const.$hover}) {
            @include util.color-accent-bg(.5);
        }

        &:has(input:checked) {
            @include util.color-accent-bg;
        }

        + label {
            @include util.basic-border(0 0 0 1px);
        }

        input {
            cursor: pointer;
        }
    }
}

/* Button link
 *
 * Default button link
 */
.button-link {
    @include util.button-link(2);
    display: block;
    margin: 0 auto;
    width: fit-content;
}

/* Iconed text
 *
 * Default iconed text
 */
.iconed-text {
    @include util.iconed-text;
}

/* Rectangle list
 *
 * A list of small, (ideally) horizontal rectancgles
 */
.list-rect {
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: .5em;

    > li {
        @include util.horizontal-box(.7, 1.4);
        font-size: .9em;
    }
}

/* Link list
 *
 * List of links
 */
.list-link {
    display: flex;
    list-style: none;
}

/* Split card detail list
 *
 * A list of detail cards, shown in the "split" style (wide card, logo on the left)
 *
 * Domain classes:
 * - logo: logo graphic
 * - abstract: abstract text
 */
.list-detail-split-card {
    @include util.list-detail;
    display: grid;
    grid-auto-flow: row;
    min-width: fit-content;
    width: 50%;
    place-self: center;

    > li {
        $space: 1em;
        border-radius: $space;
        display: grid;
        grid-template-columns: max(7.5em, 7.5%) 1fr;
        min-width: fit-content;

        .logo {
            display: block;
            background-color: var(--color-lvl-next);
            padding: calc($space / 2);
            border-top-left-radius: $space;
            border-bottom-left-radius: $space;
            object-fit: contain;
            height: 100%;
            width: 100%;
            aspect-ratio: 1;
        }

        > div {
            display: grid;
            gap: 1em;
            grid-auto-flow: row;
            border-top-right-radius: $space;
            border-bottom-right-radius: $space;
            padding: $space $space $space calc($space * const.$phi);
            @include util.transparent-background-image(--bg-img-card, var(--color-lvl-rgb), .15);

            .abstract {
                align-self: center
            }

            .list-link {
                @include util.link-list-card;
            }
        }

        &#{const.$hover} > div {
            @include util.transparent-background-image(--bg-img-card, var(--color-accent-rgb), .15);
            @include util.color-accent-fg;
        }
    }
}

/* Project card list
 *
 * A list of project cards

 * Domain classes:
 * - logo: logo graphic
 * - abstract: abstract text
 * - context: context text
 * - status: status text
 */
.list-project {
    @include util.list-detail;
    display: flex;
    flex-flow: row wrap;

    > li {
        @include util.transparent-background-image(--bg-img-card, var(--color-lvl-rgb), .15);
        $space: .75em;
        border-radius: $space;
        display: grid;
        flex-basis: 20em;
        grid-template: min-content repeat(3, auto) 1fr min-content / 1fr auto;
        padding: $space;
        row-gap: $space;

        /* Tag list */
        .list-rect {
            grid-column: 1 / 3;

            > li#{const.$hover} {
                @include util.bring-out(1.15);
            }
        }

        .logo {
            @include util.size-graphic(3lh, auto);
            align-self: center;
            grid-row: 2/4;
            grid-column: 2;
        }

        h3 {
            grid-row: 2;
        }

        .context {
            grid-row: 3;
        }

        .status {
            grid-column: 1/3;
            grid-row: 4;
        }

        .abstract {
            grid-column: 1/3;
            grid-row: 5;
            align-self: center;
        }

        .list-link {
            @include util.link-list-card;
            grid-row: 6;
            grid-column: 1 / 3;
        }

        &#{const.$hover} {
            @include util.transparent-background-image(--bg-img-card, var(--color-accent-rgb), .15);

            .list-rect > li {
                background-color: var(--color-lvl);
            }

            /* Adapt foreground to accent color (except tag list). */
            :not(.list-rect, .list-rect *) {
                @include util.color-accent-fg;
            }
        }

        &:not(#{const.$hover}) {
            .list-rect > li {
                @include util.color-accent-bg;
            }
        }
    }
}

/* Definition
 *
 * Defines a term. Can be shown as a tooltip.

 * Domain classes:
 * - definition-tooltip: tooltip form of the definition
 * - definition-tooltip-trigger: trigger of the definition tooltip form
 *
 * - title: definition title
 * - logo: definition logo
 * - type: definition types
 * - synopsis: definition synopsis
 */
.definition {
    @include util.basic-border(1px);
    @include util.hover-card;
    @include util.transparent-background-image(--bg-img-card, var(--color-lvl-rgb), .15);
    $space: .75em;
    background-color: var(--color-lvl);
    border-radius: $space;
    display: grid;
    font-size: .8em;
    grid-template: min-content min-content 1fr / 1fr auto;
    padding: $space;
    row-gap: $space;

    .link,
    abbr {
        z-index: 1;
        /* Creates a stacking context */
        position: relative;
    }

    .title a {
        @include util.hover-card-target;
    }

    .logo {
        @include util.size-graphic(2.5lh, auto);
        grid-row: 1 / 3;
        grid-column: 2;
    }

    .type {
        grid-row: 2;
        grid-column: 1 / 3;
    }

    .synopsis {
        grid-row: 3;
        grid-column: 1 / 3;
        align-content: center;
    }

    &-tooltip {
        @extend .definition;
        position: fixed;
        z-index: 1;

        &-trigger {
            cursor: pointer;
            font-style: italic;
        }

        /*&#{const.$hover}, i am hovered
        &-trigger#{const.$hover} ~ & my trigger is hover
        {
            opacity: 1;
            z-index: 2;
            transition-delay: 500ms;
        }*/
        /*&-trigger:not(#{const.$hover}) ~ &:not(#{const.$hover}) my trigger is not hover and i am not hover
        {
            transition-delay: 250ms;
            pointer-events: none;
            user-select: none;
            opacity: 0;
        }*/
    }
}

/* Content block
 *
 * A block containing a limited amount of content, defined by a singular purpose.
 */
.content-block {
    border-radius: 1.5em;
    background-color: var(--color-lvl);
    padding: 1.5em;
    align-self: center;
    max-width: 100%;
}

/* Definition list
 *
 * A list of definition cards.
 */
.list-definition {
    list-style: none;
    display: flex;
    flex-wrap: wrap;
    gap: 1em;

    > li {
        @include util.hover-card;
        flex-shrink: 1;
        min-width: min-content;
        display: contents;

        article#{const.$hover} {
            @include util.transparent-background-image(--bg-img-card, var(--color-accent-rgb), .1);
        }
    }
}

/* Text
 *
 * Textual content. May be applied to a container of paragraphs or a single paragraph.
*/
.text p,
p.text {
    &:first-of-type:not(:last-of-type) {
        text-indent: 2cap;
    }
}

.text {
    h1, h2, h3, h4, h5, h6 {
        margin-bottom: const.$heading-margin;
    }

    > p, > .figure {
        &:not(:last-child) {
            margin-bottom: const.$p-margin;
        }
    }
}

.text:has(> :not(:only-child)) {
    @include util.justify;
    column-width: const.$max-line-length;

    > * {
        max-width: const.$max-line-length;
    }
}