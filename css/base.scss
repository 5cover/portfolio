@media (prefers-reduced-motion) {

    /* styles to apply if a user's device settings are set to reduced motion */
    @mixin bring-out($factor) {}
}

@mixin bring-out($factor) {
    transform: scale($factor);
}

$huge-val: calc(infinity * 1px);

@mixin basic-border($width) {
    border-width: $width;
    border-style: solid;
    border-color: rgba(var(--color-fg-rgb), .125);
}

:root {
    font-family: Roboto, system-ui;
    /* Workaround until relative colors get widespread support */
    --color-bg-rgb: 238, 238, 238;
    --color-fg-rgb: 17, 17, 17;
    --color-lvl1-rgb: 221, 221, 221;
    --color-lvl2-rgb: 204, 204, 204;
    --color-lvl3-rgb: 187, 187, 187;
    --color-bg: rgb(var(--color-bg-rgb));
    --color-fg: rgb(var(--color-fg-rgb));
    --color-lvl1: rgb(var(--color-lvl1-rgb));
    --color-lvl2: rgb(var(--color-lvl2-rgb));
    --color-lvl3: rgb(var(--color-lvl3-rgb));
    --transition: calc(1s / 3) ease;
    color: var(--color-fg);
    background-color: var(--color-bg);
    font-size: 20.57px;
    scroll-behavior: smooth;
}

@mixin theme-dark {
    --color-bg-rgb: 17, 17, 17;
    --color-fg-rgb: 238, 238, 238;
    --color-lvl1-rgb: 34, 34, 34;
    --color-lvl2-rgb: 51, 51, 51;
    --color-lvl3-rgb: 68, 68, 68;
}

:root[data-theme="dark"] {
    @include theme-dark;
}

@media (prefers-color-scheme: dark) {
    :root[data-theme="system"] {
        @include theme-dark;
    }
}

@mixin color-accent-bg($opacity: 1) {
    background-color: rgba(166, 97, 68, $opacity);
}

@mixin color-accent-fg {
    color: white;
    --color-fg: white;
    --color-fg-rgb: 255, 255, 255;
}

@mixin color-accent($opacity: 1) {
    @include color-accent-fg;
    @include color-accent-bg($opacity);
}

* {
    transition:
        background-color var(--transition),
        color var(--transition),
        transform var(--transition),
        opacity var(--transition),
        fill var(--transition),
        stroke var(--transition),
        filter var(--transition);
    box-sizing: border-box;
}

@function hover($prefix: '') {
    @return "#{$prefix}:hover, #{$prefix}:focus-within";
}

.text-icon {
    display: inline-block;
    height: 1cap;
    width: auto;
    margin-right: .5ch;
    vertical-align: baseline;
}

/* Opt-in styling : link colors */
.link:link {
    color: #a66144;
}

.link:visited {
    color: #91553b;
}

#{hover('.link')} {
    color: #be7c60;
}

a {
    text-decoration: none;
}

a:not(.link) {
    color: inherit;
}

small {
    color: rgba(var(--color-fg-rgb), .5)
}

body,
h1,
h2,
h3,
h4,
ul,
p,
figure,
input {
    margin: 0;
    padding: 0;
}

h1 {
    font-size: 36px;
    font-weight: 500;
    width: fit-content;
}

h2 {
    font-size: 28.8px;
    font-weight: 500;
}

h3 {
    font-size: 24px;
    font-weight: 500;
}

h4 {
    font-size: 20px;
    font-weight: 500;
}

img,
svg {
    vertical-align: middle;
}

body {
    max-width: 100vw;
    min-height: 100vh;
    display: grid;
    row-gap: 3em;
    grid-template-rows: auto 1fr auto;
}

@mixin lvl1-content($border-width) {
    @include basic-border($border-width);
    background-color: var(--color-lvl1);
    padding: 1em 2em;
}

@mixin absolute-fill {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
}

@mixin hover-card {
    position: relative;
}

@mixin hover-card-target {
    &:after {
        @include absolute-fill;
    }
}

@mixin transparent-background-image($img, $color, $opacity) {
    position: relative;

    &:before {
        @include absolute-fill;
        display: block;
        background: $img no-repeat;
        background-size: cover;
        opacity: $opacity;
    }

    background-color: $color;
}

@mixin absolute-center {
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin horizontal-box-padding($factor: 1) {
    padding: calc($factor * .25lh) calc($factor * 1ch);
}

header {
    @include lvl1-content(0 0 1px 0);
    align-items: center;
    display: flex;
    flex-wrap: wrap;
    column-gap: 2em;
    row-gap: 1em;
    justify-content: space-between;
    height: fit-content;

    .list-flags {
        list-style-type: none;
        display: flex;
        flex-wrap: wrap;
        gap: .5em
    }

    nav {
        display: flex;
        flex-wrap: wrap;
        align-items: baseline;
        column-gap: 3em;
        row-gap: 1.5em;

        > ul {
            display: flex;
            list-style-type: none;
            column-gap: 2em;
            row-gap: 1em;
            flex-wrap: wrap;

            a {
                font-size: 24px;
            }
        }

        a {

            #{hover('&')},
            &[href="#"] {
                text-decoration: underline;
            }
        }
    }
}

main {
    grid-row: 2;
}

footer {
    @include lvl1-content(1px);
    border-top-width: 1px;
    grid-row: 3;
    position: relative;

    p:has(small) {
        position: absolute;
        @include absolute-center;
    }

    p:has(svg) {
        text-align: right;
    }

    #{hover('a > svg')} {
        @include bring-out(1.15);
    }
}

section h2 {
    text-align: center;
}

.theme-switches {
    display: flex;
    border-radius: .25em;
    @include basic-border(1px);

    input {
        @include absolute-fill();
        opacity: 0;
    }

    label {
        position: relative;
        padding: .25em;
        width: 2em;
        display: flex;
        align-items: center;
        justify-content: center;

        &:last-of-type {
            border-top-right-radius: inherit;
            border-bottom-right-radius: inherit;
        }

        &:first-of-type {
            border-top-left-radius: inherit;
            border-bottom-left-radius: inherit;
        }

        &:has(#{hover(input)}) {
            @include color-accent(.5);
        }

        &:has(input:checked) {
            @include color-accent;
        }

        + label {
            @include basic-border(0 0 0 1px);
        }

        input {
            cursor: pointer;
        }
    }
}

.content-block {
    border-radius: 1em;
    background-color: var(--color-lvl1);
    padding: 1em;
    margin-left: auto;
    margin-right: auto;
    max-width: 32em;

    h2 {
        margin-bottom: .5em;
    }
}

@mixin hover-sensitive-list($factor) {

    #{hover('> li')},
    /* used in JS */
    > li.hover {
        @include bring-out($factor);
        z-index: 1;
    }
}

.hover-sensitive-list {
    @include hover-sensitive-list(1.05);
}

.gray-when-not-hover:not(#{hover()}) {
    filter: grayscale(100%);
    opacity: .5;
}

.list-tag {
    list-style-type: none;
    display: flex;
    flex-wrap: wrap;
    gap: .5em;

    > * {
        @include horizontal-box-padding(.75);
        font-size: 18px;
        border-radius: .4em;
        z-index: 1;
    }
}

.list-projects {
    gap: 1em;
    display: flex;
    flex-flow: row wrap;

    > li {
        @include hover-card;
        @include transparent-background-image(var(--bg-img), var(--color-lvl2), .1);
        list-style-type: none;
        @include basic-border(1px);
        display: grid;
        grid-template: min-content repeat(4, auto) min-content / 1fr auto;
        row-gap: .5em;
        border-radius: .75em;
        padding: .75em;
        width: 18em;
        /* Required to clip the :before pseudo-element to the card's boundaries */
        overflow: hidden;

        .list-tag {
            @include hover-sensitive-list(1.15);
            grid-column: 1 / 3;

            > li {
                @include color-accent;
            }
        }

        h3 > a {
            @include hover-card-target;
        }

        .logo {
            grid-row: 2/6;
            grid-column: 2;
            height: 4lh;
            width: auto;
            max-width: 25ch;
            object-fit: contain;
            margin: auto 0;
        }

        h3 {
            grid-row: 2;
        }

        .context {
            grid-row: 3;
        }

        .status {
            grid-row: 4;
        }

        .abstract {
            grid-row: 5;
        }

        .list-anchors {
            @include hover-sensitive-list(1.15);
            list-style-type: none;
            display: flex;
            grid-row: 6;
            grid-column: 1 / 3;
            flex-direction: row-reverse;
            align-items: flex-end;
            gap: .5em;

            > li {
                z-index: 1;

                img,
                svg {
                    height: 1.5em;
                    width: 1.5em;
                    object-fit: contain;
                }
            }
        }

        &:hover,
        &:focus-within {
            @include color-accent-bg;

            .list-tag > li {
                background-color: var(--color-lvl2);
            }

            :not(.list-tag > li) {
                @include color-accent-fg();
            }
        }
    }
}

:has(> .definition-tooltip) {
    position: relative;
}

.definition-tooltip-trigger {
    cursor: pointer;
    font-style: italic;
}

a.definition-tooltip-trigger {
    text-decoration: none;
}

.definition-tooltip {
    @include transparent-background-image(var(--bg-img), var(--color-lvl2), .1);
    grid-template: 1fr 1fr auto / 1fr auto;
    display: grid;
    font-size: .75em;
    border-radius: .75em;
    position: absolute;
    bottom: 2lh;
    max-width: 50ch;
    padding: .75em;
    background-color: var(--color-lvl2);
    visibility: hidden;
    opacity: 0;

    > img,
    > svg {
        grid-row: 1 / 3;
        grid-column: 2;
        height: 2lh;
        width: auto;
        max-width: 25ch;
        object-fit: contain;
    }

    > p:nth-last-child(2) {
        grid-row: 2;
        grid-column: 1 / 3;
    }

    > p:nth-last-child(1) {
        grid-row: 3;
        grid-column: 1 / 3;
    }

    /* Add the new arrow pseudo-element */
    &:after {
        content: "";
        position: absolute;
        bottom: -.9lh;
        left: 1em;
        border-left: .9lh solid transparent;
        border-right: .9lh solid transparent;
        border-top: .9lh solid var(--color-lvl2);
    }
}

.definition-tooltip-visible {
    visibility: visible;
    opacity: 1;
}