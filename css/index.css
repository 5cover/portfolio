/* index.html stylesheet */
/* Emulates infinity. */
/* Hover state selector  */
/* Graphic element selector */
/* Golden ratio */
/* Horizontal margin of an element whose width spans over the entire viewport */
/* Vertical margin of an element whose width spans over the entire viewport */
/* Maximum length of a line of text */
/* Utilities
 * 
 * Increase stylesheet expressivity. May not be semantic.
 */
/* Super annotation
 *
 * An annotation as an exponent
 */
/* Shallow list item
 *
 * Display contents on children <li>, inherit layout properties. Similar to the HTML transparent content model.
 */
/* Gapped children
 *
 * Display flex, gap based on line height.
 */
/* Justify
 *
 * Justify and hyphenate. Replaces `text-align: justify`.
 */
/* Bring out element
 *
 * Scale the element.
 *
 * $factor: scale() argument -> scaling factor
 */
/* Basic border
 *
 * A basic border around the element. Color is foreground, .125 alpha.
 *
 * $width: border-width value -> border width
 */
/* Accent color foreground 
 *
 * Adapt the foreground to the accent color for better contrast.
 */
/* Accent color
 *
 * Set the background to the accent color and adapt the foreground color.
 *
 * $opacity: number [0..1] -> accent background color opacity
 */
/* Level 1 content
 *
 * Content spanning over the width of the entire viewport. One level of nesting inside the main element (direct child of the main element).
 *
 * $border-width: border-width value -> border width
 */
/* Absolue fill
 *
 * Position absolutely and fill all available space.
 */
/* Hover card 
 *
 * Position relatively. Represents an interactive card covered by an anchor.
 */
/* Hover card target
 *
 * The anchor element of an hover card.
 */
/* Transparent background image
 *
 * Define a transparent background image.
 *
 * $varname-img: <image>                  -> the background image.
 * $color-rgb:   rgb() or rgba() argument -> the backging color (also used as a fallback if $varname-img is not defined)
 * $opacity:     real [0..1]              -> the opacity of the image
 * $origin:      <visual-box>             -> origin of the background image layer
 *
 * As sometimes the gradient is a little bit smaller than the image, the origin of the color background layer is set to `border-box` as a workaround.
 *
 * Todo: fix background color transition. Currently: instant. Expected: transition-duration
 */
/* Absolute center
 *
 * Position absolutely and center in parent, horizontally and vertically.
 */
/* Horizontal box
 *
 * Appropriate padding and radius for an horizontal box.
 *
 * $padding-factor:       number -> padding multiplier
 * $border-radius-factor: number -> border radius multiplier
 */
/* Size graphics
 *
 * Size graphics children accordingly.
 *
 * $height:     height value     -> children graphics height
 * $width:      width value      -> children graphics width
 * $object-fit: object-fit value -> children graphics object-fit
 */
/* Gray when not hover 
 *
 * The element is grayed out when it is not hovered.
 */
.gray-when-not-hover:not(:is(:hover, :focus-within, :focus)) {
  filter: grayscale(100%);
  opacity: 0.5;
}

/* Adapet for accent background color
 *
 * Appropriate styles to maintain legibility when the element has an accent background color.
 */
section {
  border-width: 1px 0;
  border-style: solid;
  border-color: rgba(var(--color-fg-rgb), 0.125);
  background-color: var(--color-lvl);
  padding: 1em min(2.5vw, 2.5lh);
}

.list-piano-tiles {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  list-style: none;
  width: 100%;
}
.list-piano-tiles > li {
  position: relative;
  flex-basis: calc(min(100%, 1920px) / 8);
  flex-shrink: 1;
  min-width: 180px;
}
@media screen and (max-width: 1440px) {
  .list-piano-tiles > li h2 {
    font-size: 1.25em;
  }
}
.list-piano-tiles > li a {
  text-decoration: none;
}
.list-piano-tiles > li a:after {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
}
.list-piano-tiles > li img {
  max-width: 100%;
  height: auto;
  display: block;
}
.list-piano-tiles > li figcaption {
  position: absolute;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
}
.list-piano-tiles > li figcaption div {
  background-color: rgba(var(--color-lvl-rgb), 0.6666666667);
  height: -moz-fit-content;
  height: fit-content;
}
.list-piano-tiles > li figcaption div > * {
  padding: 0.25lh 1ch;
  border-radius: 0lh;
}
.list-piano-tiles > li:is(:hover, :focus-within, :focus), .list-piano-tiles > li.hover {
  z-index: 1;
}
@media (prefers-reduced-motion: no-preference) {
  .list-piano-tiles > li:is(:hover, :focus-within, :focus), .list-piano-tiles > li.hover {
    transform: scale(1.05);
  }
}
.list-piano-tiles > li:not(.list-piano-tiles > li:is(:hover, :focus-within, :focus)) figcaption {
  opacity: 0;
}

#me {
  display: flex;
  flex-wrap: wrap;
  gap: 1em;
}
#me > img {
  width: auto;
  height: 8em;
  border-radius: 0.5em;
  align-self: center;
}

#ongoing-projects {
  position: relative;
  display: flex;
  flex-flow: column nowrap;
  gap: 1em;
}
#ongoing-projects h2 {
  text-align: center;
}

#contact {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  -moz-column-gap: 1em;
       column-gap: 1em;
}
#contact ul {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 0.3333333333lh;
}
#contact ul > li {
  width: -moz-fit-content;
  width: fit-content;
}
#contact > a {
  height: 100%;
  position: relative;
}
#contact > a img {
  min-height: 0;
  max-height: 12em;
  width: auto;
  opacity: 0.5;
  border-radius: 0.5em;
}
#contact > a span {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  padding: 0.25lh 1ch;
  border-radius: 0.25lh;
  width: -moz-max-content;
  width: max-content;
  background-color: var(--color-lvl);
}
@media (prefers-reduced-motion: no-preference) {
  #contact > a:is(:hover, :focus-within, :focus) {
    transform: scale(1.05);
  }
}
#contact > a:is(:hover, :focus-within, :focus) img {
  opacity: 1;
}
#contact > a:is(:hover, :focus-within, :focus) span {
  --color-fg: white;
  --color-fg-rgb: 255, 255, 255;
  background-color: rgba(var(--color-accent-rgb), 1);
}/*# sourceMappingURL=index.css.map */