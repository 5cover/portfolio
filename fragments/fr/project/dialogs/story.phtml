<?php
require_once 'fragment.php';
$f = start('fr') ?>
<h3 id="the-spark-of-an-idea">Dialogs &mdash; L'étincelle d'une idée</h3>
<p>Le parcours de <strong>Dialogs</strong> a commencé avec un besoin simple. Je travaillais sur un autre de mes projets, une application open-source <?= $f->def('dotnet') ?> appelée <?= $f->a_project('winclean') ?>. Dans le cadre de ce projet, j'avais besoin d'implémenter des boîtes de dialogue modales, ces fenêtres contextuelles qui nécessitent une interaction de l'utilisateur avant que l'application puisse continuer. Un <?= $f->def('task-dialog') ?> semblait être la solution idéale pour une interface moderne et conviviale. Cependant, les solutions existantes étaient loin d'être satisfaisantes.</p>
<h3 id="the-problem-with-existing-solutions">Le problème des solutions existantes</h3>
<p>L'API officielle managée TaskDialog, livrée avec <?= $f->def('winforms') ?> était, pour le dire gentiment, terne. Elle manquait des fonctionnalités et de la flexibilité dont j'avais besoin. Des packages tiers étaient disponibles, mais aucun d'entre eux n'offrait la gamme complète des fonctionnalités que je recherchais, en particulier une navigation simple et des hyperliens. Cette frustration m'a conduit à une décision&nbsp;: si l'outil parfait n'existe pas, pourquoi ne pas le créer moi-même&nbsp;?</p>
<h3 id="the-build-your-own-mountain-philosophy">La philosophie <q>Construire sa propre montagne</q></h3>
<p>Je crois en la philosophie de <q>construire sa propre montagne</q><?= $f->ref() ?>. Si vous ne trouvez pas l'outil parfait pour le travail, créez-le. Cette approche résout non seulement votre problème immédiat, mais contribue également à la communauté, en aidant potentiellement d'autres personnes confrontées aux mêmes défis.</p>
<h3 id="planning-and-design">Planification et conception</h3>
<p>Avant de me plonger dans le code, j'ai pris du recul par rapport à la planification. J'ai créé un backlog de toutes les fonctionnalités dont j'avais besoin et j'ai étudié les subtilités des boîtes de dialogue des tâches Windows. Grâce à la documentation complète disponible en ligne<?= $f->ref() ?>, ce processus a été simple. J'ai ensuite pris un marqueur et j'ai collé une feuille de papier A3 sur mon mur. J'ai esquissé un diagramme de classe <?= $f->def('uml') ?> qui engloberait mes objectifs&nbsp;: une bibliothèque facile à utiliser avec un accès simple à toutes les fonctionnalités natives des dialogues de tâche, sans les limitations arbitraires des wrappers tiers.</p>
<h3 id="implementation-and-learning">Implémentation et apprentissage</h3>
<p>Avec un plan clair en tête, j'ai commencé à implémenter la bibliothèque en <?= $f->def('csharp') ?>. J'ai écrit des tests unitaires en utilisant le framework de test <?= $f->def('nunit') ?> pour m'assurer que tout fonctionnait comme prévu. Ce projet a pris environ six mois à réaliser, mais ce fut une expérience profondément enrichissante. J'ai mis mes connaissances en <?= $f->def('oop') ?> à l'épreuve et j'ai appris de nouvelles techniques et de nouveaux modèles, tels que l'<?= $f->def('adapter') ?>, la <?= $f->def('facade') ?> et la <?= $f->def('chain-of-responsibility') ?>. Je me suis également familiarisé avec les événements C# et l'interopérabilité native, avec une pincée de programmation fonctionnelle et d'immuabilité.</p>
<h3 id="continuous-integration-and-deployment">Intégration et déploiement continus</h3>
<p>L'une des parties les plus passionnantes de ce projet a été d'en apprendre davantage sur les pipelines <?= $f->def('ci-cd') ?>. J'ai mis en place un déploiement automatisé de <?= $f->def('nuget') ?> à l'aide d'un workflow <?= $f->def('github') ?>, ce qui a simplifié le processus de publication des mises à jour de la bibliothèque.</p>
<h3 id="the-result">Le résultat</h3>
<p>Au final, j'ai créé une bibliothèque de wrapper des dialogues de tâche .NET qualitative et complète qui a depuis été téléchargée des milliers de fois. Il est gratifiant de savoir que d'autres développeurs la trouvent utile et qu'elle comble une lacune dans l'écosystème .NET.</p>
<h3 id="usage-examples">Exemples d'utilisation</h3>
<p>Voici quelques exemples pour vous donner une idée de la facilité d'utilisation de <strong>Dialogs</strong>&nbsp;:</p>
<h4 id="simple-task-dialog">Dialogue de tâche simple</h4>
<?= $f->codeblock(<<<CODE
using Scover.Dialogs;

using Page page = new()
{
    Content = "Sample text",
    Buttons = { Button.Yes, Button.No, Button.Cancel }
};

var clickedButton = new Dialog(page).Show();
CODE) ?>
<h4 id="multi-page-task-dialog">Dialogue de tâche multi-page</h4>
<?= $f->codeblock(<<<CODE
using Scover.Dialogs;

using Page page1 = new()
{
    MainInstruction = "Page #1",
    Buttons = new(ButtonStyle.CommandLinks)
    {
        { "Label", "Supplemental instruction" },
        Button.Cancel
    }
};
using Page page2 = new()
{
    MainInstruction = "Page #2",
    Expander = new("Expanded information") 
};

var clickedButton = new MultiPageDialog(page1, new Dictionary<Page, NextPageSelector>
{
    [page1] = request => request.Kind is NavigationRequestKind.Cancel ? null : page2,
}).Show();
CODE) ?>
<h3 id="conclusion">Conclusion</h3>
<p><strong>Dialogs</strong> est bien plus qu'une simple bibliothèque&nbsp;; c'est un témoignage de la puissance de prendre les choses en main. Tout a commencé par une insatisfaction et s'est terminé par un outil qui non seulement répondait à mes besoins, mais qui a également profité à la communauté des développeurs au sens large. Ce projet a été un voyage d'apprentissage, de croissance et de contribution, et je suis fier de ce qu'il est devenu.</p>