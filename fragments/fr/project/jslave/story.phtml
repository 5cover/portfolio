<div>
<p>A language to define declarative &quot;blueprints&quot; that generate Java classes.</p>
<p>Supports automatic and customizable generation of:</p>
<ul  class="ul">
<li>Inheritance trees (<code>extend</code>, <code>implement</code>, <code>permits</code>)</li>
<li>Attributes</li>
<li>Getters/setters</li>
<li><code>hashCode</code> method</li>
<li><code>equals</code> method</li>
<li><code>toString</code> method</li>
<li>Method stubs</li>
</ul>
<p>Addtional features include:</p>
<ul  class="ul">
<li>Nested and static classes</li>
<li>Arbitrary Java code blocks</li>
</ul>
</div><article>
<h3 id="advantages-over-snippets">Advantages over snippets</h3>
<p>A Jslave blueprint is self-contained and can be automated, unlike snippets/shortcuts which are IDE-dependent and require manual input. This approach has the following advantages:</p>
<ul  class="ul">
<li>Blueprints can be passed around as files</li>
<li>Blueprints can generate to something else than Java</li>
<li>Generation is predictable and deterministic</li>
<li>Generation can be automated in a script</li>
</ul>
<p>Cons:</p>
<ul  class="ul">
<li>Since we&#39;re no longer in a Java context, we won&#39;t recieve help much from the IDE while writing JSlave (syntax highlighting, auto-completion&hellip;). This issue is mitigated by the simplicity of the language, and the future VSCode extension.</li>
</ul>
</article><article>
<h3 id="getting-started">Getting started</h3>
<h4 id="1-write-your-jslave-file">1. Write your JSlave file</h4>
<p>Your JSlave file (idomatically called a <strong>blueprint</strong>) defines the structure of your Java code, and provides syntax for common patterns in order to avoid writing all that pesky Java boilerplate.</p>
<p>More details about the syntax can be found in the <a href=".">documentation</a>, but the main idom is as follows:</p>
<p>A blueprint is a list of <strong>definitions</strong> that generate to the corresponding Java type (classes, records, interfaces&hellip;). Each definitions contains zero or more <strong>members</strong> that determine the contents of the type.</p>
<p>Members can be of two kinds:</p>
<ul class="ul">
<li><strong>attributes</strong> define the data fields of the type. They generate to Java class attributes, and getter/setter methods.</li>
<li><strong>methods</strong> define the behaviors of the type. Methods that have a special meaning in Java (<code>equals</code>, <code>hashCode</code>, <code>toString</code>) are called <strong>special methods</strong>. They can be expressed in three forms:<ul>
<li><strong>stub</strong>: an empty method to implement either from the generated Java or with a code block (more on these later)</li>
<li><strong>default implementation</strong>: a default, general-purpose implementation that should work for most cases</li>
<li><strong>custom implementation</strong>: the default implementation, customized by passing arguments to the method</li>
</ul>
</li>
</ul>
<h4 id="2-generate-it">2. Generate it</h4>
<p>From the VSCode extension GUI or using the standalone binary, generate your blueprint.</p>
<p>Multiple targets are available</p>
<ul class="ul">
<li>Java (obviously): generates Java code</li>
<li>Mermaid: generates a <a href="https://mermaid.js.org/syntax/classDiagram.html">Mermaid class diagram</a> that represents the structure of the blueprint</li>
</ul>

</article>