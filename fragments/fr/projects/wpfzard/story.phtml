<?php
require_once 'fragment.php';
$f = new Fragment(__FILE__, 'fr') ?>
<p><strong>WPFZard</strong> est une bibliothèque d'<?= $f->def('wizard') ?> pour <?= $f->def('wpf') ?> que j'ai créée pour mon autre projet, <?= $f->a_project('winclean') ?>, car j'avais besoin d'une bibliothèque pour fournir un composant UX d'assistant simple et facile à utiliser.</p>
<h3 id="the-problem">Le problème</h3>
<p>Pour créer des assistants, j'ai d'abord utilisé le Xceed Extended WPF Toolkit™<?=$f->ref()?>. Cela a fonctionné, mais j'avais oublié un détail important&nbsp;: mon projet utilise la licence MIT<?=$f->ref()?>, tandis que le toolkit Xceed utilise une licence personnalisée<?=$f->ref()?> qui, après inspection, s'avéra incompatible avec la licence MIT. Cela signifie que je m'exposais à un procès de la part de Xceed. Bien qu'il aurait été peu probable que le problème prenne des proportions aussi dramatiques, je m'exposais effectivement à des ennuis juridiques, voire peut-être à une lettre de cessation et d'abstention de la part de Xceed.</p>
<p>J'ai donc décidé de créer ma propre bibliothèque d'assistants, conformément à la philosophie <q>construisez votre propre montagne</q>.</p>
<h3 id="result">Résultat</h3>
<p>Au final, je n'ai pas utilisé <strong>WPFZard</strong> dans WinClean. C'est parce que j'ai découvert que les versions précédentes du toolkit Xceed sont sous licence MIT, je peux donc les utiliser légalement dans WinClean. C'était un projet intéressant, cependant, et il m'a beaucoup appris sur la création de composants WPF réutilisables.</p>