<?php
require_once 'fragment.php';
$f = new Fragment(__FILE__, 'en') ?>
<h3 id="the-spark-of-an-idea">Dialogs &mdash; The spark of an idea</h3>
<p>The journey of <strong>Dialogs</strong> began with a simple need. I was working on another project of mine, an open-source <?= $f->def('dotnet') ?> application called <?= $f->a_project('winclean') ?>. As part of this project, I needed to implement modal dialogs &mdash; those pop-up windows that require user interaction before the application can proceed. A <?= $f->def('task-dialog') ?> seemed like the perfect fit for a modern and user-friendly interface. However, the existing solutions were far from satisfactory.</p>
<h3 id="the-problem-with-existing-solutions">The problem with existing solutions</h3>
<p>The official managed TaskDialog API shipped with <?= $f->def('winforms') ?> was, to put it mildly, lackluster. It lacked the features and flexibility I needed. Third-party packages were available, but none of them offered the full range of features I was looking for, especially simple navigation and hyperlinks. This frustration led me to a decision: if the perfect tool doesn't exist, why not build it myself?</p>
<h3 id="the-build-your-own-mountain-philosophy">The <q>Build Your Own Mountain</q> philosophy</h3>
<p>I believe in the philosophy of <q>build your own mountain</q><?= $f->ref() ?>. If you can't find the perfect tool for the job, create it. This approach not only solves your immediate problem but also contributes to the community, potentially helping others who face the same challenges.</p>
<h3 id="planning-and-design">Planning and design</h3>
<p>Before diving into code, I took a step back to plan. I created a backlog of all the features I needed and studied the intricacies of Windows task dialogs. Thanks to the extensive documentation available online<?= $f->ref() ?>, this was a straightforward process. I then grabbed a marker and taped up an A3 sheet of paper on my wall. I sketched out an <?= $f->def('uml') ?> class diagram that would encompass my objectives: an easy-to-use library with simple access to all native task dialog features, without the arbitrary limitations of third-party wrappers.</p>
<h3 id="implementation-and-learning">Implementation and learning</h3>
<p>With a clear plan in mind, I started implementing the library in <?= $f->def('csharp') ?>. I wrote unit tests using the <?= $f->def('nunit') ?> testing framework to ensure everything worked as expected. This project took around six months to complete, but it was a deeply rewarding experience. I put my knowledge of <?= $f->def('oop') ?> to the test and learned new techniques and patterns, such as the <?= $f->def('adapter') ?>, <?= $f->def('facade') ?>, and <?= $f->def('chain-of-responsibility') ?>. I also familiarized myself with C# events and native interop, with a sprinkle of functional programming and immutability.</p>
<h3 id="continuous-integration-and-deployment">Continuous integration and deployment</h3>
<p>One of the most exciting parts of this project was learning about <?= $f->def('ci-cd') ?> pipelines. I set up automated <?= $f->def('nuget') ?> deployment using a <?= $f->def('github') ?> workflow, which streamlined the process of publishing updates to the library.</p>
<h3 id="the-result">The result</h3>
<p>In the end, I had created a qualitative and comprehensive .NET task dialog wrapper library that has since been downloaded thousands of times. It's gratifying to know that other developers find it useful and that it fills a gap in the .NET ecosystem.</p>
<h3 id="usage-examples">Usage examples</h3>
<p>Here are a couple of examples to give you an idea of how easy it is to use <strong>Dialogs</strong>:</p>
<h4 id="simple-task-dialog">Simple Task Dialog</h4>
<?= $f->codeblock(<<<CODE
using Scover.Dialogs;

using Page page = new()
{
    Content = "Sample text",
    Buttons = { Button.Yes, Button.No, Button.Cancel }
};

var clickedButton = new Dialog(page).Show();
CODE) ?>
<h4 id="multi-page-task-dialog">Multi-Page Task Dialog</h4>
<?= $f->codeblock(<<<CODE
using Scover.Dialogs;

using Page page1 = new()
{
    MainInstruction = "Page #1",
    Buttons = new(ButtonStyle.CommandLinks)
    {
        { "Label", "Supplemental instruction" },
        Button.Cancel
    }
};
using Page page2 = new()
{
    MainInstruction = "Page #2",
    Expander = new("Expanded information") 
};

var clickedButton = new MultiPageDialog(page1, new Dictionary<Page, NextPageSelector>
{
    [page1] = request => request.Kind is NavigationRequestKind.Cancel ? null : page2,
}).Show();
CODE) ?>
<h3 id="conclusion">Conclusion</h3>
<p><strong>Dialogs</strong> is more than just a library; it's a testament to the power of taking matters into your own hands. It started with dissatisfaction and ended with a tool that not only met my needs but also benefited the broader developer community. This project was a journey of learning, growth, and contribution, and I'm proud of what it has become.</p>