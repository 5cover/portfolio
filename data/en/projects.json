{"island-maps":{"abstract":"Mapping islands from Anno 2070 videogame maps for insight and automation","start-date":"2023-04-27","context":"Personal","technologies":["anno2070"],"links":{"Blog":{"anchor":"website","href":"https://anno2070.fandom.com/wiki/User_blog:Scover32/Anno_2070:_Island_maps"}},"references":[{"anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/NP-hardness","caption":"NP-hardness, Wikipedia"}],"gallery":[],"story":"<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Anno_2070\" data-definition-id=\"anno2070\" class=\"link definition-tooltip-trigger\">Anno 2070</a> islands are not randomly generated. There's a set of islands defined in the game's files. They are rotated and placed randomly to create an illusion of randomness, but all maps actually have the same islands.</p>\n<p>So I reproduced them in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/AnnoDesigner/anno-designer\" data-definition-id=\"anno-designer\" class=\"link definition-tooltip-trigger\">Anno Designer</a>.</p>\n<article>\n    <h3>Possible usages</h3>\n    <ul class=\"list\">\n        <li><p><strong>Making island-wide layouts.</strong> I often use building layouts to optimize space usage, but layouts have a major flaw: they are assumed t</p>o be rectangles. Their space efficiency is based on their bounding box, but islands are not rectangles. They have rather irregular shapes. Which is why one can't solely rely on current building layouts to build efficiently.</li>\n        <li><p><strong>Computing optimal island-wide layouts with an algorithm</strong> (really looking forward to that one). It's an NP-hard<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup> problem, so the solution will require heuristics. I haven't researched it thoroughly yet, but the implementation promises to be an interestign challenge.</p></li>\n    </ul>\n    <ul class=\"list\">\n    <li><p><strong>Black</strong>: blocked tile (Rock, reef, river&hellip;)</p></li>\n    <li><p><strong>Yellow</strong>: shore (near rivers and on the coast, some tiles can have roads built on them, but nothing else)</p></li>\n    <li><p><strong>Blank</strong>: water or land.</p></li>\n    <li><p><strong>Purple</strong>: oddity (oddly-behaving tiles)</p></li>\n    </ul>\n    <figure class=\"figure\">\n        <img src=\"/portfolio/img/projects/island-maps/3_mines_1_river.webp\" alt=\"Island 1 &ndash; 3 mines 1, river slot\" width=\"800\" height=\"571\" loading=\"lazy\" title=\"Island 1 &ndash; 3 mines, 1 emplacement fluival\">\n        <figcaption>Island 1 &ndash; 3 mines, 1 river slot</figcaption>\n    </figure>\n    <p>This is the first island I've reproduced. It's among the smallest islands in the game.</p>\n    <p><strong>Oddity</strong>: this tile is not buildable, but it still makes a sound when you try to build a road on it.</p>\n</article>","team":[],"title":"Island Maps","tags":["idea","algorithms"]},"2l2w-french-rural-road":{"abstract":"Up to code French road asset","context":"Personal","end-date":"2022-10-02","gallery":[],"links":{"Steam Workshop article":{"anchor":"steam","href":"https://steamcommunity.com/sharedfiles/filedetails/?id=2515915993"}},"references":[],"start-date":"2021-06-15","story":"<p>I've always found that in Cities: Skylines the cities have a rather bland and homogeneous international look. Where are the taste, the emotion, the particularity, all these things that make up the charm of a city? So I tried to reproduce European towns and villages, particularly French ones. And this is what created the need for a French road, which respects real standards for road markings and signs. No one had done it yet on the Workshop, so I gave it a try. I thus discovered the basics of texturing and 3D modeling.</p>\n<p>Getting a foot in the world of 3D modeling and game design has been an enriching experience for me, even if I won't make it a passion.</p>","tags":["3d-modeling","asset-creation"],"team":[],"technologies":["blender","cities-skylines"],"title":"2L2W French Rural Road"},"cori":{"abstract":"Correct and easy to use C user input library","context":"Personal","end-date":"2024-03-09","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/stb_cori"}},"references":[{"anchor":"website","href":"https://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html","caption":"Felix Palmen &mdash; A beginner's guide <em>away</em> from <code>scanf()</code>"},{"anchor":"github","href":"https://github.com/nothings/stb","caption":"Sean Barrett &mdash; STB-style public domain libraries repository"},{"anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/X_macro","caption":"Wikipedia &mdash; X macro pattern"}],"start-date":"2023-10-09","story":"<p>Cori is a single-file <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C_(programming_language)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a> library designed to simplify the process of getting user input in C programs. It provides a comprehensive set of functions that handle common input scenarios and potential errors, allowing programmers to focus more on their program's logic rather than the intricacies of input handling. Additionally, Cori aims to serve as a safer and more user-friendly replacement for the <code>scanf</code> function, which is often misused by beginners and can easily lead to undefined behavior<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>.</p>\n<h3 id=\"problems-cori-intends-to-solve\">Problems Cori intends to solve</h3>\n<ol class=\"list\">\n    <li><p>Simplify user input handling: Cori provides a set of functions that handle various types of user input, making it easier for programmers to collect and process input without worrying about the underlying complexities.</p></li>\n    <li><p>Replace <code>scanf</code>: The <code>scanf</code> function is notoriously difficult to use correctly, especially for beginners. Cori offers a safer and more intuitive alternative, reducing the risk of undefined behavior and making input handling more straightforward.</p></li>\n</ol>\n<h3 id=\"core-concepts\">Core concepts</h3>\n<h4 id=\"types-of-input\">Types of input</h4>\n<p>Cori supports a wide range of input types, each represented by a specific C type:</p>\n<ul class=\"list\">\n    <li><p>Signed integers: <code>intmax</code>, <code>longlong</code>, <code>long</code>, <code>int</code>, <code>short</code></p></li>\n    <li><p>Unsigned integers: <code>uintmax</code>, <code>ulonglong</code>, <code>ulong</code>, <code>uint</code>, <code>ushort</code></p></li>\n    <li><p>Floating point numbers: <code>longdouble</code>, <code>double</code>, <code>float</code></p></li>\n    <li><p>Text: <code>character</code>, <code>until</code>, <code>line</code>, <code>linel</code></p></li>\n    <li><p>Other: <code>boolean</code></p></li>\n</ul>\n<h4 id=\"error-handling-system\">Error handling system</h4>\n<p>Cori includes a robust error handling system that allows programmers to define custom error handlers. The library defines an enumeration <code>InputError</code> that represents all possible error conditions, such as empty input, end-of-file (EOF), invalid boolean characters, multiple characters, not a number, number out of bounds, out of memory, and unsupported numeric base.</p>\n<h4 id=\"function-families\">Function families</h4>\n<p>For each type of input, Cori provides a family of functions to handle different scenarios:</p>\n<ul class=\"list\">\n    <li><p><code>read_&lt;typename&gt;</code>: Reads input from <code>stdin</code> and handles errors using a NO-OP (no operation) error handler.</p></li>\n    <li><p><code>read_&lt;typename&gt;_or</code>: Reads input from <code>stdin</code> and handles errors using a specified error handler.</p></li>\n    <li><p><code>read_&lt;typename&gt;_from</code>: Reads input from a specified <code>FILE *</code> stream and handles errors using a NO-OP error handler.</p></li>\n    <li><p><code>read_&lt;typename&gt;_or_from</code>: Reads input from a specified <code>FILE *</code> stream and handles errors using a specified error handler.</p></li>\n    <li><p><code>tryRead_&lt;typename&gt;</code>: Reads input from <code>stdin</code> once and returns an error code if an error occurs.</p></li>\n    <li><p><code>tryRead_&lt;typename&gt;_from</code>: Reads input from a specified <code>FILE *</code> stream once and returns an error code if an error occurs.</p></li>\n</ul>\n<h3 id=\"techniques-and-patterns-used\">Techniques and patterns used</h3>\n<h4 id=\"stb-style-libraries\">STB-Style Libraries</h4>\n<p>Cori is designed as an STB-style library<sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup>, which means it consists of a single header file that contains both the interface and the implementation. This makes it easy to share and reuse, as users only need to include the header file in their projects. However, this approach can lead to large header files, so it is best suited for simple, single-purpose libraries like Cori.</p>\n<h4 id=\"heavy-usage-of-macros\">Heavy usage of macros</h4>\n<p>Cori makes extensive use of macros for metaprogramming, allowing for the generation of repetitive code patterns. One notable pattern used is the X-macro pattern<sup id=\"cite-ref-3\"><a class=\"link\" href=\"#ref-3\">[3]</a></sup>, which enables the definition of a set of related functions and data structures in a concise and maintainable way. This approach reduces code duplication and makes the library more flexible and easier to extend.</p>\n<h3 id=\"example\">Example</h3>\n<p>Cori is designed with simplicity in mind.</p>\n<figure class=\"figure\">\n    <pre><code>#define CORI_IMPLEMENTATION\n#include \"stb_cori.h\"\n\nint main() {\n    int result;\n    printf(\"Type an integer: \");\n    result = read_int();\n    printf(\"Recieved %d\\n\", result);\n}</code></pre>    <figcaption>Sample program using Cori to read an integer from standard input.</figcaption>\n</figure>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Cori is a powerful and user-friendly library for handling console input in C programs. By providing a comprehensive set of functions and a robust error handling system, Cori simplifies the input handling process and offers a safer alternative to the <code>scanf</code> function. Its design as an STB-style library and the use of advanced macro techniques make it easy to integrate and extend, making it an excellent choice for both beginners and experienced C programmers, specifically for simple, quick programs</p>\n<p>For more details on how to use Cori, please refer to the <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/5cover/stb_cori/blob/main/README.md\">README</a> file.</p>","tags":["low-level","library"],"team":[],"technologies":["vs-code","c","make"],"title":"<abbr title=\"Correct Input\">Cori</abbr>"},"demineur-python":{"abstract":"GUI Minesweeper game","context":"NSI High-school","end-date":"2022-04-24","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/Demineur-Python"}},"logo":{"isThemedSvg":false,"url":"/portfolio/img/projects/demineur-python/logo.png"},"references":[{"anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller","caption":"Wikipedia &mdash; Model–view–controller"}],"start-date":"2022-03-01","story":"<p>A simple <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\" data-definition-id=\"python\" class=\"link definition-tooltip-trigger\">Python</a> minesweeper game made using <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Tkinter\" data-definition-id=\"tkinter\" class=\"link definition-tooltip-trigger\">Tkinter</a> and images for the grid cells. Provides an incomplete implementation of the <abbr title=\"Model View Controller\">MVC</abbr> architecture pattern<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>.</p>","tags":["game","oop"],"team":[],"technologies":["python","tkinter","spyder"],"title":"Python Minesweeper"},"dialogs":{"abstract":"A managed adapter for Windows <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://learn.microsoft.com/en/windows/win32/controls/task-dialogs-overview\" data-definition-id=\"task-dialog\" class=\"link definition-tooltip-trigger\">task dialog</a> that supports all native features.","context":"Personal","start-date":"2022-11-23","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/Dialogs"},"NuGet package":{"anchor":"nuget","href":"https://www.nuget.org/packages/Scover.Dialogs"}},"logo":{"isThemedSvg":false,"url":"/portfolio/img/projects/dialogs/logo.png"},"references":[{"anchor":"website","href":"https://learn.microsoft.com/en-us/windows/win32/controls/task-dialogs-overview","caption":"Microsoft &mdash; About Task Dialogs"},{"anchor":"youtube","href":"https://youtu.be/443UNeGrFoM?t=6949","caption":"Eskil Steenberg &mdash; How I program C (at 1h55m49s)"}],"end-date":"2023-06-25","story":"<h3 id=\"the-spark-of-an-idea\">Dialogs &mdash; The spark of an idea</h3>\n<p>The journey of <strong>Dialogs</strong> began with a simple need. I was working on another project of mine, an open-source <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/.NET\" data-definition-id=\"dotnet\" class=\"link definition-tooltip-trigger\">.NET</a> application called <a class=\"link\" href=\"/portfolio/en/projects/winclean.html\">WinClean</a>. As part of this project, I needed to implement modal dialogs &mdash; those pop-up windows that require user interaction before the application can proceed. A <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://learn.microsoft.com/en/windows/win32/controls/task-dialogs-overview\" data-definition-id=\"task-dialog\" class=\"link definition-tooltip-trigger\">task dialog</a> seemed like the perfect fit for a modern and user-friendly interface. However, the existing solutions were far from satisfactory.</p>\n<h3 id=\"the-problem-with-existing-solutions\">The problem with existing solutions</h3>\n<p>The official managed TaskDialog API shipped with <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Windows_Forms\" data-definition-id=\"winforms\" class=\"link definition-tooltip-trigger\">WinForms</a> was, to put it mildly, lackluster. It lacked the features and flexibility I needed. Third-party packages were available, but none of them offered the full range of features I was looking for, especially simple navigation and hyperlinks. This frustration led me to a decision: if the perfect tool doesn't exist, why not build it myself?</p>\n<h3 id=\"the-build-your-own-mountain-philosophy\">The <q>Build Your Own Mountain</q> philosophy</h3>\n<p>I believe in the philosophy of <q>build your own mountain</q><sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>. If you can't find the perfect tool for the job, create it. This approach not only solves your immediate problem but also contributes to the community, potentially helping others who face the same challenges.</p>\n<h3 id=\"planning-and-design\">Planning and design</h3>\n<p>Before diving into code, I took a step back to plan. I created a backlog of all the features I needed and studied the intricacies of Windows task dialogs. Thanks to the extensive documentation available online<sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup>, this was a straightforward process. I then grabbed a marker and taped up an A3 sheet of paper on my wall. I sketched out an <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Unified_Modeling_Language\" data-definition-id=\"uml\" class=\"link definition-tooltip-trigger\">UML</a> class diagram that would encompass my objectives: an easy-to-use library with simple access to all native task dialog features, without the arbitrary limitations of third-party wrappers.</p>\n<h3 id=\"implementation-and-learning\">Implementation and learning</h3>\n<p>With a clear plan in mind, I started implementing the library in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C_Sharp_(programming_language)\" data-definition-id=\"csharp\" class=\"link definition-tooltip-trigger\">C#</a>. I wrote unit tests using the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/NUnit\" data-definition-id=\"nunit\" class=\"link definition-tooltip-trigger\">NUnit</a> testing framework to ensure everything worked as expected. This project took around six months to complete, but it was a deeply rewarding experience. I put my knowledge of <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" data-definition-id=\"oop\" class=\"link definition-tooltip-trigger\">OOP</a> to the test and learned new techniques and patterns, such as the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Adapter_pattern\" data-definition-id=\"adapter\" class=\"link definition-tooltip-trigger\">Adapter</a>, <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Facade_pattern\" data-definition-id=\"facade\" class=\"link definition-tooltip-trigger\">Facade</a>, and <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern\" data-definition-id=\"chain-of-responsibility\" class=\"link definition-tooltip-trigger\">Chain of Responsibility</a>. I also familiarized myself with C# events and native interop, with a sprinkle of functional programming and immutability.</p>\n<h3 id=\"continuous-integration-and-deployment\">Continuous integration and deployment</h3>\n<p>One of the most exciting parts of this project was learning about <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/CI/CD\" data-definition-id=\"ci-cd\" class=\"link definition-tooltip-trigger\">CI/CD</a> pipelines. I set up automated <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/NuGet\" data-definition-id=\"nuget\" class=\"link definition-tooltip-trigger\">NuGet</a> deployment using a <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/GitHub\" data-definition-id=\"github\" class=\"link definition-tooltip-trigger\">GitHub</a> workflow, which streamlined the process of publishing updates to the library.</p>\n<h3 id=\"the-result\">The result</h3>\n<p>In the end, I had created a qualitative and comprehensive .NET task dialog wrapper library that has since been downloaded thousands of times. It's gratifying to know that other developers find it useful and that it fills a gap in the .NET ecosystem.</p>\n<h3 id=\"usage-examples\">Usage examples</h3>\n<p>Here are a couple of examples to give you an idea of how easy it is to use <strong>Dialogs</strong>:</p>\n<h4 id=\"simple-task-dialog\">Simple Task Dialog</h4>\n<pre><code>using Scover.Dialogs;\n\nusing Page page = new()\n{\n    Content = \"Sample text\",\n    Buttons = { Button.Yes, Button.No, Button.Cancel }\n};\n\nvar clickedButton = new Dialog(page).Show();</code></pre><h4 id=\"multi-page-task-dialog\">Multi-Page Task Dialog</h4>\n<pre><code>using Scover.Dialogs;\n\nusing Page page1 = new()\n{\n    MainInstruction = \"Page #1\",\n    Buttons = new(ButtonStyle.CommandLinks)\n    {\n        { \"Label\", \"Supplemental instruction\" },\n        Button.Cancel\n    }\n};\nusing Page page2 = new()\n{\n    MainInstruction = \"Page #2\",\n    Expander = new(\"Expanded information\") \n};\n\nvar clickedButton = new MultiPageDialog(page1, new Dictionary&lt;Page, NextPageSelector&gt;\n{\n    [page1] = request =&gt; request.Kind is NavigationRequestKind.Cancel ? null : page2,\n}).Show();</code></pre><h3 id=\"conclusion\">Conclusion</h3>\n<p><strong>Dialogs</strong> is more than just a library; it's a testament to the power of taking matters into your own hands. It started with dissatisfaction and ended with a tool that not only met my needs but also benefited the broader developer community. This project was a journey of learning, growth, and contribution, and I'm proud of what it has become.</p>","tags":["oop","library","ui"],"team":[],"technologies":["visual-studio","csharp","dotnet"],"title":"Dialogs"},"edplusplus":{"abstract":"GUI application for tracking School Grades","context":"NSI High-school","end-date":"2022-11-09","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/EDPlusPlus"}},"logo":{"isThemedSvg":false,"url":"/portfolio/img/projects/edplusplus/logo.png"},"references":[],"start-date":"2022-10-21","story":"<p>A simple <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\" data-definition-id=\"python\" class=\"link definition-tooltip-trigger\">Python</a> application written with <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Tkinter\" data-definition-id=\"tkinter\" class=\"link definition-tooltip-trigger\">Tkinter</a> in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.education.gouv.fr/reussir-au-lycee/la-specialite-numerique-et-sciences-informatiques-au-bac-325448\" data-definition-id=\"nsi\" class=\"link definition-tooltip-trigger\">NSI</a> speciality to interact with a database for tracking school grades.</p>","tags":["software","db","oop"],"team":[],"technologies":["python","sqlite","spyder"],"title":"ED++"},"ethercrash":{"abstract":"Stats and data mining on Ethercrash game logs","context":"Personal","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/ethercrash"}},"references":[],"start-date":"2023-05-24","end-date":"2023-06-29","story":"<article>\n<h3><code>scrape_crashes.py</code>: web-scraping game logs from Ethercrash</h3>\n<p>\nThis script is a Python-based web scraper designed to extract data from the EtherCrash game logs. The script utilizes the <code>nodriver</code> library to automate the process of fetching game data from the EtherCrash website. The main purpose of this script is to scrape game logs, including the crash value, timestamp, player count, and the sum of all player's bets in Ethos.\n</p>\n\n<p>\nThe script addresses several challenges and features to avoid detection and maintain a more natural and human-like scraping behavior. These include randomizing the header, implementing random wait times, fetching other pages occasionally, and shuffling the order of game IDs in fixed-size chunks.\n</p>\n\n<p>\nThe script takes two arguments: the start ID and the end ID. It scrapes the game logs in decreasing order of IDs, starting from the start ID and ending before the end ID. The script also supports a chunk size argument, which determines the size of the chunk of game IDs to shuffle. This helps in avoiding detection and maintaining a more natural scraping behavior.\n</p>\n\n<p>\nThe script outputs the scraped data to the standard output in CSV format. It supports a header argument, which writes a header row to the output. The script also supports a verbose argument, which shows verbose output during the scraping process.\n</p>\n\n<p>\nOverall, this script is a useful tool for anyone interested in analyzing EtherCrash game logs. By automating the process of data extraction and implementing features to avoid detection, the script enables users to scrape large amounts of data efficiently and accurately.\n</p>\n</article>\n<article>\n<h3><code>infinite_money.py</code>: compute an optimal game strategy from the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Comma-separated_values\" data-definition-id=\"csv\" class=\"link definition-tooltip-trigger\">CSV</a> game logs</h3>\n\n<p>\nThis script is a data analysis tool that aims to find the optimal cashout value based on the available game logs from the EtherCrash game. The script uses a binary search algorithm to efficiently search for the optimal cashout value. The script also provides visualizations of the data using the matplotlib library.\n</p>\n\n<p>\nThe script reads game logs from a CSV file and creates a sequence of Game objects, each representing a single game. The script then creates a sequence of Cashout objects, each representing a possible cashout value. The script calculates the actual win probability and the difference between the actual win probability and the required win probability for each Cashout object. The script also calculates the gain for each Cashout object, which is the difference multiplied by the value of the cashout.\n</p>\n\n<p>\nThe script uses several visualization functions to display the data. The plot_diff function plots the difference between the actual win probability and the required win probability for each Cashout object. The plot_gain function plots the gain for each Cashout object. The scatter_by function creates a scatter plot of the data, with the x-axis representing a specified attribute of the Game objects and the y-axis representing another specified attribute.\n</p>\n\n<p>\nThe script also includes several other functions for creating leaderboards, calculating the median and mean of a sequence of numbers, and plotting box plots and bar charts.\n</p>\n\n<p>\nOverall, this script is a useful tool for anyone interested in analyzing EtherCrash game logs and finding the optimal cashout value. By using a binary search algorithm and providing visualizations of the data, the script enables users to efficiently search for the optimal cashout value and gain insights into the data.\n</p>\n\n</article>","tags":["data","cli"],"team":[],"technologies":["python","numpy","c","csharp","matplotlib","csv"],"title":"Ethercrash"},"file-signature-detector":{"abstract":"File signature (magic number) detector","context":"NSI High-school","end-date":"2022-05-08","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/FileSignatureDetector"}},"references":[{"anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/File_format#Magic_number","caption":"File format magic number &mdash; Wikipedia"}],"start-date":"2022-04-07","story":"<p>A simple <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\" data-definition-id=\"python\" class=\"link definition-tooltip-trigger\">Python</a> application written with <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Tkinter\" data-definition-id=\"tkinter\" class=\"link definition-tooltip-trigger\">Tkinter</a> in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.education.gouv.fr/reussir-au-lycee/la-specialite-numerique-et-sciences-informatiques-au-bac-325448\" data-definition-id=\"nsi\" class=\"link definition-tooltip-trigger\">NSI</a> speciality to retrive the extension of a file from its signature <sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>, using a <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Algorithme_glouton\" data-definition-id=\"greedy-algorithm\" class=\"link definition-tooltip-trigger\">Greedy algorithm</a></p>","tags":["software"],"team":[],"technologies":["python","csv"],"title":"FileSignatureDetector"},"jslave":{"abstract":"Formal language for <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" data-definition-id=\"java\" class=\"link definition-tooltip-trigger\">Java</a> metaprogramming and boilerplate elimination","context":"Personal","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/jslave"}},"references":[{"anchor":"website","href":"https://mermaid.js.org/syntax/classDiagram.html","caption":"Mermaid.js &mdash; Class diagram syntax"}],"start-date":"2024-05-30","story":"<p>A language to define declarative <q>blueprints</q> to generate <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" data-definition-id=\"java\" class=\"link definition-tooltip-trigger\">Java</a> classes.</p>\n<p>Supports automatic and customizable generation of:</p>\n<ul class=\"list\">\n    <li>\n        <p>Inheritance trees (<code>extend</code>, <code>implement</code>, <code>permits</code>)</p>\n    </li>\n    <li>\n        <p>Attributes</p>\n    </li>\n    <li>\n        <p>Getters/setters</p>\n    </li>\n    <li>\n        <p><code>hashCode</code> method</p>\n    </li>\n    <li>\n        <p><code>equals</code> method</p>\n    </li>\n    <li>\n        <p><code>toString</code> method</p>\n    </li>\n    <li>\n        <p>Method stubs</p>\n    </li>\n</ul>\n<p>Addtional features include:</p>\n<ul class=\"list\">\n    <li>\n        <p>Nested and static classes</p>\n    </li>\n    <li>\n        <p>Arbitrary Java code blocks</p>\n    </li>\n</ul>\n<article>\n    <h3 id=\"advantages-over-snippets\">Advantages over snippets</h3>\n    <p>A Jslave blueprint is self-contained and can be automated, unlike snippets/shortcuts which are IDE-dependent and require manual input. This approach has the following advantages:</p>\n    <ul class=\"list\">\n        <li>\n            <p>Blueprints can be passed around as files</p>\n        </li>\n        <li>\n            <p>Blueprints can generate to something else than Java</p>\n        </li>\n        <li>\n            <p>Generation is predictable and deterministic</p>\n        </li>\n        <li>\n            <p>Generation can be automated in a script</p>\n        </li>\n    </ul>\n    <p>Cons:</p>\n    <ul class=\"list\">\n        <li>\n            <p>Since we're no longer in a Java context, we won't recieve help much from the IDE while writing JSlave (syntax highlighting, auto-completion&hellip;). This issue is mitigated by the simplicity of the language, and the future <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" data-definition-id=\"vs-code\" class=\"link definition-tooltip-trigger\">VS Code</a> extension.</p>\n        </li>\n    </ul>\n</article>\n<article>\n    <h3 id=\"getting-started\">Getting started</h3>\n    <h4 id=\"1-write-your-jslave-file\">1. Write your JSlave file</h4>\n    <p>Your JSlave file (idomatically called a <strong>blueprint</strong>) defines the structure of your Java code, and provides syntax for common patterns in order to avoid writing all that pesky Java boilerplate.</p>\n    <p>More details about the syntax can be found in the <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/5cover/jslave/blob/main/doc/Language%20reference.md\">documentation</a>, but the main idom is as follows:</p>\n    <p>A blueprint is a list of <strong>definitions</strong> that generate to the corresponding Java type (classes, records, interfaces&hellip;). Each definition contains zero or more <strong>members</strong> that determine the contents of the type.</p>\n    <p>Members can be of two kinds:</p>\n    <ul class=\"list\">\n        <li>\n            <p><strong>Attributes</strong> define the data fields of the type. They generate to Java class attributes, and getter/setter methods.</p>\n        </li>\n        <li>\n            <p><strong>Methods</strong> define the behaviors of the type. Methods that have a special meaning in Java (<code>equals</code>, <code>hashCode</code>, <code>toString</code>) are called <strong>special methods</strong>. They can be expressed in three forms:</p>\n            <ul class=\"list\">\n                <li>\n                    <p><strong>Stub</strong>: an empty method to implement either from the generated Java or with a code block</p>\n                </li>\n                <li>\n                    <p><strong>Default implementation</strong>: a default, general-purpose implementation that should work for most cases</p>\n                </li>\n                <li>\n                    <p><strong>Custom implementation</strong>: the default implementation, customized by passing arguments to the method</p>\n                </li>\n            </ul>\n        </li>\n    </ul>\n    <h4 id=\"2-generate-it\">2. Generate it</h4>\n    <p>From the VSCode extension GUI or using the standalone binary, generate your blueprint.</p>\n    <p>Multiple targets are available</p>\n    <ul class=\"list\">\n        <li>\n            <p>Java (obviously): generates Java code</p>\n        </li>\n        <li>\n            <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://mermaid.js.org/\" data-definition-id=\"mermaid\" class=\"link definition-tooltip-trigger\">Mermaid</a>: generates a Mermaid class diagram<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup> that represents the structure of the blueprint</p>\n        </li>\n    </ul>\n</article>","tags":["low-level","cli","software"],"team":[],"technologies":["vs-code","ebnf","zig"],"title":"JSlave"},"portfolio":{"abstract":"My portfolio","context":"BUT","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/portfolio"}},"references":[],"start-date":"2024-06-17","story":"","tags":["web","but-realiser","ux"],"team":[],"technologies":["html","sass","php","vs-code","bash","json","markdown","python","javascript","svg"],"title":"Portfolio"},"psdc":{"abstract":"Lannion IUT Pseudocode compiler","background":"/portfolio/img/projects/psdc/bg.png","context":"Personal","gallery":[{"caption":"Poster / Infographic","iframe-src":"/portfolio/img/projects/psdc/poster.pdf"}],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/psdc"}},"references":[{"caption":"Lexical analysis, Wikipedia","anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/Lexical_analysis"},{"caption":"Parsing, Wikipedia","anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/Parsing"},{"caption":"Crafting Interpreters, Robert Nystrom","anchor":"website","href":"https://craftinginterpreters.com"},{"caption":"Creating a Compiler, Pixeled, YouTube","anchor":"youtube","href":"https://www.youtube.com/playlist?list=PLUDlas_Zy_qC7c5tCgTMYq2idyyT241qs"},{"caption":"Formal grammar, Wikipedia","anchor":"wikipedia","href":"https://en.wikipedia.org/wiki/Formal_grammar"}],"start-date":"2023-11-15","story":"<p>Psdc meets a need. That of automating the tedious task of translating programs between different programming languages.</p>\n<p>During my BUT Informatique training, I learned algorithms with Pseudocode, a pseudo programming language invented for the needs of the IUT of Lannion. Inspired from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Pascal_(programming_language)\" data-definition-id=\"pascal\" class=\"link definition-tooltip-trigger\">Pascal</a>, Pseudocode allows an algorithm to be stated in a language closer to that of humans than to that of computers, while keeping the exhaustive aspect of any programming language.</p>\n<p>During our practical work, we very often had to translate pseudocode programs to <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C_(programming_language)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a>. This task is quite daunting, hence my desire to automate it. And that's what led me to discover compiler design.</p>\n<p>As an example, here's a simple pseudocode program that prints <q>Hello</q> to the screen:</p>\n<pre><code>programme AfficherBonjour c'est début\n    écrireÉcran(\"Hello\");\nfin</code></pre><p>Here is an equivalent program in C:</p>\n<pre><code>#include &lt;stdio.h&gt;;\n\nint main() {\n    printf(\"Bonjour\\n\");\n    return 0;\n}</code></pre><p>How do you automate this transformation? Well, it's actually not that complex. The Crafting Interpreters book<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup> metaphorizes the problem as climbing a mountain:</p>\n<figure class=\"figure\"><img alt=\"Mountain Metaphor\" src=\"/portfolio/img/projects/psdc/mountain.png\" width=\"1824\" height=\"833\" loading=\"lazy\">\n    <figcaption><cite>Crafting Interpreters</cite>, Robert Nystrom &mdash; &copy; <time datetime=\"2015\">2015</time> &ndash; <time datetime=\"2021\">2021</time>, MIT license</figcaption>\n</figure>\n<p>Let's start with the original source code, at the foot of the mountain. As the steps go by (scanning, parsing, analysis), the representation of the code becomes more and more high-level, that is, it focuses more on the expressed semantics than on implementation details.</p>\n<p>Once the top is reached, we are halfway through the compilation. We have a breathtaking view of the semantics of the code, that is, the meaning that the user gives it through the syntax of our language.</p>\n<p>So let's begin our descent. Let's successively convert our high-level representation into forms that approximate our final goal: the machine language, which will be executed directly by the processor.</p>\n<p>I only discovered Crafting Interpreters quite late in the project. I originally based it on the playlist <em lang=\"en\">Creating a Compiler</em><sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup> by <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/@pixeled-yt\">Pixeled</a> on YouTube, where we see the design and implementation of a compiler for a language <em>ex-nihilo</em> called Hydrogen. The compiler transforms the code into assembly, then uses <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Netwide_Assembler\" data-definition-id=\"nasm\" class=\"link definition-tooltip-trigger\">NASM</a> to generate the machine code.</p>\n<p>It is in these videos that I learned the basics of lexical analysis<sup id=\"cite-ref-3\"><a class=\"link\" href=\"#ref-3\">[3]</a></sup>, formal grammars<sup id=\"cite-ref-4\"><a class=\"link\" href=\"#ref-4\">[4]</a></sup>, or syntactic analysis<sup id=\"cite-ref-5\"><a class=\"link\" href=\"#ref-5\">[5]</a></sup>. It is really interesting and I've learned a lot.</p>\n<p>This project is far from being done &mdash; many features are yet to implemented, notably for <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\" data-definition-id=\"vs-code\" class=\"link definition-tooltip-trigger\">VS Code</a> integration with a language server.</p>","tags":["software","oop","compiler","but-realiser","but-optimiser","cli"],"team":[],"technologies":["csharp","ebnf","vs-code","markdown"],"title":"Psdc"},"puissance-4":{"abstract":"Command-line Connect 4 game","context":"NSI High-school","end-date":"2021-12-05","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/Puissance-4"}},"references":[],"start-date":"2021-11-15","story":"<p>This project is a simple Connect 4 game programmed in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Python_(programming_language)\" data-definition-id=\"python\" class=\"link definition-tooltip-trigger\">Python</a>. I made it in the context of the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.education.gouv.fr/reussir-au-lycee/la-specialite-numerique-et-sciences-informatiques-au-bac-325448\" data-definition-id=\"nsi\" class=\"link definition-tooltip-trigger\">NSI</a> speciality in high school. It allowed me to formalize my Python skills as it was my first <q>real</q> project.</p>","tags":["game","high-level","cli"],"team":[],"technologies":["python","spyder"],"title":"Puissance 4"},"s1.01":{"abstract":"Command-line Sudoku game. Implementing a client's needs (S1.01)","background":"/portfolio/img/projects/s1.01/bg.png","context":"BUT","end-date":"2023-11-27","gallery":[{"caption":"Pseudocode algorithm","iframe-src":"/portfolio/img/projects/s1.01/algorithme-pseudocode.html"},{"caption":"Test book (extract)","iframe-src":"/portfolio/img/projects/s1.01/cahier-de-tests.html"},{"caption":"Function list (extract)","iframe-src":"/portfolio/img/projects/s1.01/liste-de-fonctions.html"},{"caption":"Model (extract)","url":"/portfolio/img/projects/s1.01/maquette.png"},{"caption":"Final program (extract)","iframe-src":"/portfolio/img/projects/s1.01/programme-final.html"},{"caption":"Tests (extract)","iframe-src":"/portfolio/img/projects/s1.01/tests.html"}],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S1.01"}},"references":[],"start-date":"2023-10-16","story":"<p>The goal of this project was to create a functional Sudoku game in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C_(programming_language)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a> language, playable via the Linux terminal.</p>\n<blockquote>\n    <p>The association <q>Les têtes à clic</q> works in middle schools to familiarize students with the use of software. It also develops small computer board games for children. As an intern in this association, you are responsible for developing a program that allows a middle school student to fill in a Sudoku grid.</p>\n    <footer>— <cite>Project topic</cite></footer>\n</blockquote>","tags":["software","but-realiser","algorithms","cli","low-level"],"team":[],"technologies":["vs-code","c","doxygen"],"title":"C Sudoku game"},"s1.02":{"abstract":"Optimized Sudoku grid solver. Comparing algorithmic approaches (S1.02)","background":"/portfolio/img/projects/s1.02/bg.png","context":"BUT","end-date":"2024-05-20","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/Matteo-K/Sudoku-Solver"}},"references":[],"start-date":"2023-11-27","story":"<p>The goal of this project was to optimize a Sudoku puzzle solving algorithm so that it could solve puzzles of different difficulties as quickly as possible.</p>\n<p>This project, carried out in pairs, was a particularly enriching adventure. Indeed, after the submission, our teacher organized an optimization contest. Each participant submitted their program and our teacher made several benchmarks on Sudoku puzzles 3 &times; 3, 4 &times; 4, 5 &times; 5&hellip; to determine the team with the most optimized program.</p>\n<p>My teammate Mattéo Kervadec and I won the contest hands down.</p>\n<p>Sure, we spent a few late nights, but it allowed us to learn all sorts of optimization tips and become better programmers in general.</p>\n<p>Furthermore, this project continued to grow thanks to Mattéo and I's personal investment. We improved it in our free time, eventually ending up with Sudone.</p>","tags":["software","but-optimiser","but-collaborer","algorithms","cli","low-level"],"team":["kervadec-matteo"],"technologies":["vs-code","c","markdown","gprof","gcov","make","bash","python"],"title":"Sudone"},"s1.03":{"abstract":"Automation, scripts, containerization, Markdown parser. Setting up a development environment (S1.03)","context":"BUT","end-date":"2023-01-21","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S1.03"}},"references":[],"start-date":"2023-10-25","story":"<p>The goal of this project was to create a <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/PHP\" data-definition-id=\"php\" class=\"link definition-tooltip-trigger\">PHP</a> document generator using Docker containerization and also using PHP, scripting <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Bash_(Unix_shell)\" data-definition-id=\"bash\" class=\"link definition-tooltip-trigger\">Bash</a> etc. We were in groups of 4. On my side, I took care of writing a Markdown parser in PHP. Our teachers were smart: they modified the Markdown syntax so that we could not simply copy a parser from the Internet.</p>","tags":["but-administrer","but-collaborer","cli","sysadmin"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["bash","php","docker","github","css","html","markdown","gitlab"],"title":"Documentation generator"},"s1.04":{"abstract":"Design and implement a database. Creating a database (S1.04)","context":"BUT","end-date":"2024-01-22","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S1.04"}},"references":[],"start-date":"2023-11-27","story":"<p>The goal of this project was to create a class diagram and implement a database in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/SQL\" data-definition-id=\"sql\" class=\"link definition-tooltip-trigger\">SQL</a>.</p>","tags":["but-gerer","but-collaborer","db"],"team":["chartier--le-goff-marius"],"technologies":["sql","sql-workbench","pgsql","markdown"],"title":"Creating a database"},"s1.05":{"abstract":"Create a fake streaming website. Collecting needs (S1.05)","context":"BUT","end-date":"2024-01-21","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/Matteo-K/TabasKho"}},"references":[],"start-date":"2023-10-09","story":"<p>The objective of this project was to design and implement a website attending to the needs of a client, based an interview. The client was a company offering an online streaming service.</p>","tags":["but-conduire","but-collaborer","communication","web"],"team":["chartier--le-goff-marius","kervadec-matteo","rolland-stanislas"],"technologies":["gitlab","html","css","javascript","figma","gloomaps","vs-code","markdown"],"title":"Tabas'Kho"},"s1.06":{"abstract":"Analysis of Focus Entertainment's <abbr title=\"Corporate Social Responsibility\">CSR</abbr> report Economic environment (S1.06)","context":"BUT","end-date":"2023-06-11","gallery":[],"links":{"GitHub project":{"anchor":"github","href":"https://github.com/users/5cover/projects/3"}},"references":[],"start-date":"2023-09-08","story":"<p>This project consists of organizing a mock team building event to promote team cohesion in a company. In groups of 4, we produced a short promotional film for this event.</p>","tags":["but-collaborer"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["github","markdown"],"title":"Focus Entertainment analysis"},"s2.01":{"abstract":"Development of a performance hall management application. Création d'une <abbr title=\"Interface Homme Machine\">IHM</abbr> (S2.01)","context":"BUT","end-date":"2024-06-17","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S2.05/tree/main/lot10"}},"references":[],"start-date":"2024-05-28","story":"<p>The goal of this project is to create a performance hall management application in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Java_(programming_language)\" data-definition-id=\"java\" class=\"link definition-tooltip-trigger\">Java</a> with a <abbr title=\"Human Machine Interface\">HMI</abbr> in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/JavaFX\" data-definition-id=\"javafx\" class=\"link definition-tooltip-trigger\">JavaFX</a> that allows the venue manager to manage shows.</p>","tags":["but-realiser","oop","ui","ux"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["github","eclipse","java","javafx"],"title":"Le Patio box office"},"s2.02":{"abstract":"Innovative solutions to the <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"/portfolio/img/projects/s2.02/sujet-sae.pdf\">N-queens problem</a>. Algorithmically exploring a problem (S2.02)","context":"BUT","end-date":"2024-03-27","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/N-queens-problem"}},"references":[],"start-date":"2024-03-11","story":"<p>The goal of this project is to solve a problem using graph theory. The problem we have chosen is the <var>N</var>-queens problem. We need to place <var>N</var>-queens on a chessboard of <var>N</var> &times; <var>N</var> squares.</p>","tags":["but-optimiser","but-collaborer","high-level","algorithms"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["python","github","json","markdown","mermaid"],"title":"N-queens problem"},"s2.03":{"abstract":"Set up a Web server. Setting up network services (S2.03)","context":"BUT","end-date":"2024-06-05","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S2.03"}},"references":[],"start-date":"2024-05-14","story":"<p>The objective of this project was to create a dynamic website in a containerized environment.</p>\n<p>We configured an <? $f->def('apache2') ?> web server.</p>\n<p>We implemented several features, including authentication and interaction with a <? $f->def('mysql') ?> database.</p>","tags":["but-administrer","but-collaborer","web","sysadmin"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["github","php","apache2","mysql","bash","vs-code","css","html","mousepad"],"title":"Weather website"},"s2.04":{"abstract":"Data mining and OSINT from french middle and high schools. Operating a database (S2.04)","context":"BUT","end-date":"2024-06-12","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S2.04"}},"references":[],"start-date":"2024-04-23","story":"","tags":["but-gerer","but-collaborer","data","db"],"team":["kervadec-matteo"],"technologies":["replit","sql","mysql","python","sql-workbench","pandas","matplotlib","numpy"],"title":"OSINT and data mining on education"},"s2.05":{"abstract":"Traditional (Waterfall) management for the Patio box office application. Managing a project (S2.05)","context":"BUT","end-date":"2024-06-17","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/S2.05"}},"references":[],"start-date":"2024-05-15","story":"","tags":["but-conduire","but-collaborer","communication"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["github"],"title":"Le Patio box office application project management"},"s2.06":{"abstract":"Planning a <em>team building</em> event and making a promotional film. Organizing teamwork (S2.06)","context":"BUT","end-date":"2024-06-06","gallery":[],"links":{"GitHub project":{"anchor":"github","href":"https://github.com/users/5cover/projects/9"}},"references":[],"start-date":"2024-04-18","story":"","tags":["but-collaborer"],"team":["chartier--le-goff-marius","kervadec-matteo","toe-paolo"],"technologies":["github"],"title":"Knight for a Day"},"the-last-teacher":{"abstract":"Post-apocalyptic story","background":"/portfolio/img/projects/the-last-teacher/bg.webp","context":"Personal","end-date":"2023-06-27","gallery":[],"links":[],"references":[],"start-date":"2022-11-15","story":"<h3>Prologue &mdash; The Evening</h3>\n<p>On a Friday eveneing, in the home of the Martinaches, safely isolated from the freezing cold of the barren nights of late winter, Emmanuel and his wife are watching TV news.</p>\n<p><q>Thee whereabouts of Vladimir Putin are currrently unknown&hellip;</q></p>\n<p>Emmanuel mechanically changes the channel.</p>\n<p><q>Several major political figured seem to have disappeared, with little to no explanation from governments. Subsitute UN secretary-</q></p>\n<p>Suddenly, the screen goes black, cutting the reporter.</p>\n<p>The couple looks at the TV screen in disbelief, until a bright display came up, reading <q>Emergency alert - Please stand by until further notice</q>. The words <q>This is not a test</q> are flashing in red near the bottom of the screen.</p>\n<p>Moments later, viewers across all continents were greeted with a alert about an oncoming nuclear attack. They were briefed about the threat, given rudimentary safety instructions, and urged not to leave home.</p>\n<p>All across the world, phones were vibrating, alarms were ringing, all devices were repeating this same message.</p>\n<p>The world was hung.</p>\n<p>Emmanuel's family quickly gathered in their basement. They had supplies down there, and according to the government safety recommendations, it was the safest place where they could be.</p>\n<p>Emmanuel held tightly for what seemed to be hours, deadly silece sometimes troubled by sounds of roofs cracking open and trees falling down.</p>\n<p>He was scared, but he was alive.</p>\n<h3>Chapter 1: Pitch-black</h3>\n<h4>May <time datetime=\"2034\">2034</time></h4>\n<h5>Tuesday</h5>\n<p>11 years ago, there was a nuclear war. No one remembers much about the specifics of who started it but it didn't take long until the whole world was involved. Cities all over were nuked and most people died.</p>\n<p>When I saw that mushroom cloud I knew my life would never be the same. My old life as an English Teacher in a quiet town is long gone. All that's left now is the bitter pain of memory. But scattered relics of a kinder past remain.</p>\n<p>The nuclear holocaust has changed the world forever. The climate changed and many species went extinct. Billions died in giant famines after the fallout had made tons of land sterile and unsuitable for agriculture. Word powers crumbled one by one and democracy was set aside in the remaining nations until all of the world eventually fell into anarchy. There was no cavalry. There was no micracle to save humanity from its impeding doom.</p>\n<p>Now, most cities and towns are deserted. Most people live in independent communities often united by common values, and some live alone. Society is organically growing back, but on a socle of blood and wrath.</p>\n<p>Not a single day goes without the questionning of the past. Actually, it could be considered more of a questioning of past mistakes.</p>\n<p>I have to get to work now.</p>\n<h5>Friday</h5>\n<p>I've always tried to have a positive perspective on things. Well, if anything, the apocalypse made me realize that what I was the most afraid of was loosing the people who counted to me the most, and being alone.</p>\n<p>I couldn't let the apocalypse change me. But it had changed the face of the world! How could it not have changed me?</p>\n<h4>June</h4>\n<h5>Saturday</h5>\n<p>Yesterday night I went for a night out at the bar. It's pretty much the last building standing here in the old city of Lannion. All around it are ruins.</p>\n<p>For all these years, I taught. I've always assumed it was what I'd be remembered for.</p>\n<p>But what was left of my life? This world was in ruins. It genuinely seemed that it had nothing to offer me anymore.</p>\n<p>Lushful trees, a bright sun shining over fields, houses, roads and villages, by the seashore, all under a clear blue sky. This place... It was a paradise.</p>\n<p>But it all came to an end, thanks to us humans. Now this is nothing but a barren wasteland, full of broken hopes, lost desires and shattered dreams that stretches as far as the eye can see, devoid of life but full of lost souls who wander, barely surviving, only to regret.</p>\n<p>Last night, as I was going to sleep, I looked at the weak, distant lights in the horizon. As I stared into the dark abyss, I couldn't help but feel a mild satisfaction. The dark hue of the night seemed like the border of the universe. There was no moon visible at this particular time. It must had been hidden by the thick green clouds covering the sky.</p>\n<p>Realizing one's insignificance in this huge universe could have been a fear to some people, but to me, it felt comforting and reassuring.</p>\n<p>After lying down on the cold floor of the room, I closed my eyes, and felt the darkness of the night get to me, but I didn't resist, and let myself fall into a deep sleep.</p>\n<p>It was just another night, seldom troubled by the thurd of the wind blowing through the dead trees, by the hillside and through the dry riverbed where the Léguer used to flow.</p>\n<p>When I woke up, I stood up to look out the window. There were no birds singing, no wind blowing, no sun shining accompanying this eve of a new day. It would have seemed that it was still the night, but I knew this was as clear as days could get under the thick clouds of nuclear winter. At least, it gave me space and time to think, plan ahead, and reflect on things. A brief recess from life in a world I don't feel part of anymore.</p>\n<p>I mean, I can't help it that man's vices had made the flower of human accomplishments wither away, but I do miss the world.</p>\n<p>We had come so far... How could things go so wrong! There must be hope.</p>\n<p>Because even though the unprecedented level of self-awareness we've been able to reach didn't prevent us from blowing ourselves up, if there's anything the bombs didn't disintegrate, it may be hope. Hope that, such as a Phoenix bird, humanity would awaken from its ashes, learn from its past mistakes and learn to live again.</p>\n<p>Hope that we would live up to being human again.</p>\n<p>One day.</p>\n<p>Soon. Maybe.</p>\n<h5>Wednesday</h5>\n<p>That was it. Humanity's ultimate fireworks. Mushroom clouds sprinkled over all contients. Cities falling down and chaos for the last day of mankind. At last, the end to it all.</p>\n<p>In a way, it was beautiful and fascinating to watch. Seeing the world burst into flames did make all human accomplishments and potential worthless, but it also meant no school, no work, no responsibilities, no anger, no hate, and no hard feelings. None of those silly concerns of the living would follow me into the grave.</p>\n<p>I remember, we kept listening to the emergency broadcasts until the very end, when every country, upon realizing that there was no hope of destroying the nukes, agreed on a worldwide diffusion of Armstrong's \"What a wonderful world\", along with a message, written in a blue Comic Sans font over footage of natural landscapes that seemed to come from Voyager's gold disk, reading <q>The world is about to end. Nukes are flying towards every major city, and the subsequent nuclear fallout will decimate the biosphere. We advise you to seek shelter and stay with your relatives. May the survivors rebuild a better world and not commit the same mistakes. Goodbye.</q> It was frightening, but honest, and looking back, I appreciate that. For our last moments, we were as kind to each other as possible. It was truly beautiful.</p>\n<p>The apocalypse was the same for everyone. It leveled out our differences. All the issues of society were gone, as we were all equals in the eyes of death. Yet, some of us survived. Some considered themselves lucky, others considered themselves worthy of divine honor. But it hardly made a difference on the long run.</p>\n<p>I have witnessed death and destruction, lost loved ones.</p>\n<p>I have experienced the worst pain imaginable.</p>\n<p>I have faced the challenges of survival in a broken world, such as finding food, water and shelter.</p>\n<p>I've had to face the loss of culture, family, customs, the whole backbone of my life.</p>\n<p>I've had to live virtually on my own, all by myself in a world altered beyond recognition.</p>\n<p>Yet, I survived. Barely, but I did survive.</p>\n<p>Frankly, I wish I hadn't.</p>\n<h3>Chapter 2: Blank canvas</h3>\n<h4>September</h4>\n<h5>Thursday</h5>\n<p>I provide for myself everyday. However I feel like something is missing. I need a way to feel part of something bigger than me again. I want to help others. I want to contribute.</p>\n<p>And I think I know how.</p>\n<p>I want to rebuild society. A fresh start for humans, with the knowledge of past events and mistakes. A sustainable society that values what's really important, and doesn't give any credit to delusions. A place for everyone. A place centered around compassion, just like us.</p>\n<p>A world that values human rights, democracy, freedom for everyone, environmental sustainability, and, most of all, social and technological enlightenment.</p>\n<p>How am I going to do that? And most importantly, what qualifies me, to be the one doing this?</p>\n<p>I mean, other people must feel the same way as me. So why aren't there utopias all over the place?</p>\n<p>Well, I probably don't have what it takes, nor any of the skills necessary to rebuild society but I don't need to. I only have to find people that do. Except I don't want to be a ruler, let alone some kind of dictator.</p>\n<p>Why aren't there utopias? Well, maybe I'm the first one. Maybe all the others have already given up. I choose not to give up. I choose to have hope and goodwill. I choose to believe that rebuilding society is possible.</p>\n<p>Because we must at least try. At least, it'll give us something to do instead of killing each other over silly concerns.</p>\n<p>A society driven by science, empathy and honesty, that would encourage thoughtful innovation to solve problems.</p>\n<p>About that, there were only two times during which human technology thrived, wars and rivalries.</p>\n<p>During times of crisis we're too busy taking care of our basic needs to innovate.</p>\n<p>During times of plenty we're too constrained by governments, customs and beliefs to innovate meaningfully.</p>\n<p>Before the apocalypse, we had managed to cheat the system with capitalism's indidual-driven innovation, but it had led us to a dangerous path to self-destruction. We can't afford to make that same mistake again, and we won't.</p>\n<p>We must break the cycle of stagnation, and unleash our true power.</p>\n<p><strong>The power of kindness.</strong></p>","tags":["art"],"team":[],"technologies":[],"title":"The Last Teacher"},"tregoria":{"abstract":"A look back at our environment in Cities: Skylines","context":"Personal","gallery":[],"links":{"Instagram post":{"anchor":"instagram","href":"https://www.instagram.com/p/CjxQUO3LryP"}},"references":[{"caption":"Cities Skylines: Bordertown, Two Dollars Twenty, YouTube","anchor":"youtube","href":"https://youtube.com/playlist?list=PL0vu9rx9cHrUoRedRsFzX367j3DlE_dTk"},{"caption":"Cities Skylines: MARS, Citywokcitywall, YouTube","anchor":"youtube","href":"https://youtube.com/playlist?list=PLkBlOw_hzgdfL6Gqw0l9P1TYKn_WIgrd-"}],"start-date":"2022-10-15","story":"<p>Trégoria is a fictional group of municipalities located in the North-East of Côtes d'Armor. It is made in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Cities:_Skylines\" data-definition-id=\"cities-skylines\" class=\"link definition-tooltip-trigger\">Cities Skylines</a>, a city-building video game that allows for a limitless level of detail and customization. Trégoria was born above all from a deep affection for my place of life and a particular attention to the invisible details of our environment. You know, all those things we see without seeing, the streetlights, the power lines, the bales of hay in the fields...</p>\n<p>What's the point? Of course, Trégoria may not be <q>art</q>, at least not in the same way as a film, a monument or even a sculpture. However, Trégoria has a message to convey. Which one? Well, let's start with one of the villages in the group. Coatlédan, let's say. Then, let's zoom out. What do we see? Fields, a few houses, more fields... Ah! Trees.</p>\n<p>You only have to look up to see what Man is doing to Mother Nature's land. It's a real domination that is taking place before us. Where will this lead us?</p>\n<p>Trégoria is far from being finished, but it is far from being alone. The game community creates a huge number of worlds that carry a message, a reflection or a personal interpretation of reality. We could think for example of MARS<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup> by <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/@Citywokcitywall\">Citywokcitywall</a>, on inequality and the excesses of capitalism. Or Bordertown<sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup>, by <a class=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.youtube.com/@twodollarstwenty\">Two Dollars Twenty</a>, on the geopolitical stakes posed by a city built on the Mexican-American border and the repercussions on architecture, urban planning and social dynamics.</p>","tags":["art"],"team":[],"technologies":["cities-skylines"],"title":"Trégoria"},"winclean":{"abstract":"Windows optimization and debloating utility","background":"/portfolio/img/projects/winclean/bg.png","context":"Personal","gallery":[{"caption":"Script execution","url":"/portfolio/img/projects/winclean/gallery/1.png"},{"caption":"Application main window","url":"/portfolio/img/projects/winclean/gallery/2.png"}],"links":{"CommentÇaMarche article (French)":{"anchor":"ccm","href":"https://www.commentcamarche.net/telecharger/utilitaires/26935-winclean"},"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/WinClean"}},"logo":{"isThemedSvg":false,"url":"/portfolio/img/projects/winclean/logo.png"},"references":[],"start-date":"2022-08-15","story":"<p>Computers are extremely powerful and advanced compared to how they were just a few decades ago. Nowadays, even low-tier CPUs performs several billion calculations per second. It's really incredible to think that the device that you're using to read this right now is this powerful.</p>\n<p>We've become so dependent of computers over the years without understanding their complex inner workings. We boot up our devices, run software, play games, go on the internet and we've become intolerant to any sort of failure or latency. We often complain of the slowness of computers without ever thinking of all the complexity of making all what they offer actually work.</p>\n<p>Is that an issue? Should we instead bear unsatisfying computer experiences, and never complain?</p>\n<p>As the creator of WinClean, I don't think so. We should do the exact opposite. We have a right to be furious when things don't work well. Why? Billions of calculations per second. What can't you do with that?</p>\n<p>Just ask it, why does it always have to be so painstakingly slow ?</p>\n<p>So, whose fault is it? Bad software? Bad hardware? Who cares? Clean it up!</p>","tags":["full-stack","oop","software","ui","ux","but-realiser","cli"],"team":[],"technologies":["csharp","github","inno-setup","powershell","visual-studio"],"title":"WinClean"},"wpfzard":{"abstract":"A simple <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Windows_Presentation_Foundation\" data-definition-id=\"wpf\" class=\"link definition-tooltip-trigger\">WPF</a> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://learn.microsoft.com/en/windows/win32/uxguide/win-wizards\" data-definition-id=\"wizard\" class=\"link definition-tooltip-trigger\">Wizard</a> library.","context":"Personal","end-date":"2022-11-23","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/WPFZard"}},"logo":{"isThemedSvg":false,"url":"/portfolio/img/projects/wpfzard/logo.png"},"references":[{"anchor":"github","href":"https://github.com/xceedsoftware/wpftoolkit","caption":"Xceed Extended WPF Toolkit™ GitHub repository"},{"anchor":"github","href":"https://github.com/5cover/WinClean/blob/master/LICENSE","caption":"WinClean license &mdash; GitHub"},{"anchor":"github","href":"https://github.com/xceedsoftware/wpftoolkit/blob/master/license.md","caption":"Xceed Extended WPF Toolkit™ license &mdash; GitHub"}],"start-date":"2022-07-21","story":"<p><strong>WPFZard</strong> is a <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Windows_Presentation_Foundation\" data-definition-id=\"wpf\" class=\"link definition-tooltip-trigger\">WPF</a> <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://learn.microsoft.com/en/windows/win32/uxguide/win-wizards\" data-definition-id=\"wizard\" class=\"link definition-tooltip-trigger\">Wizard</a> library that I've made for my other project, <a class=\"link\" href=\"/portfolio/en/projects/winclean.html\">WinClean</a>, as I needed a library to provide a simple, easy-to-use wizard UX component.</p>\n<h3 id=\"the-problem\">The problem</h3>\n<p>For making wizards, I initially used the Xceed Extended WPF Toolkit™<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>. It worked, but I had missed an important detail: my project uses the MIT License<sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup>, while the Xceed toolkit uses a custom license<sup id=\"cite-ref-3\"><a class=\"link\" href=\"#ref-3\">[3]</a></sup> which was, after careful inspection, not compatible with the MIT license. This means I was <strong>exposing myself to a lawsuit from Xceed</strong>. While it would have been unlikely for the issue to take such dramatic proportions, I indeed was exposing myself to legal troubles, even maybe a cease-and-desist letter from Xceed.</p>\n<p>So, I decided to make my own wizard library, in accordance with the <q>build your own mountain</q> philosophy.</p>\n<h3 id=\"result\">Result</h3>\n<p>In the end, I did not end up using <strong>WPFZard</strong> in WinClean. This is because I've found that previous versions of the Xceed toolkit are licensed under MIT, so I can legally use them in WinClean. It was a nice project, though, and I taught me a lot about making reusable WPF components.</p>","tags":["oop","library","ui"],"team":[],"technologies":["csharp","visual-studio","dotnet","wpf"],"title":"WPFZard"},"ztest":{"abstract":"The <code>test</code> Unix command implemented in <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Zig_(programming_language)\" data-definition-id=\"zig\" class=\"link definition-tooltip-trigger\">Zig</a>","context":"Personal","gallery":[],"links":{"GitHub repository":{"anchor":"github","href":"https://github.com/5cover/ztest"}},"references":[{"anchor":"github","caption":"test.c &mdash; GNU coreutils GitHub repository","href":"https://github.com/coreutils/coreutils/blob/master/src/test.c"}],"start-date":"2024-06-01","story":"<p>For a long time, I had been intrigued by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Zig_(programming_language)\" data-definition-id=\"zig\" class=\"link definition-tooltip-trigger\">Zig</a>, a programming language that promised to address some of the shortcomings of <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C_(programming_language)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a> while offering fresh perspectives on low-level programming. I decided to dive in and create a project that would not only help me learn Zig but also provide a practical application of the language. Thus, <strong>ztest</strong> was born &mdash; a Zig implementation of the Unix <code>test</code> command.</p>\n<h3 id=\"the-challenge\">The Challenge</h3>\n<p>One of the most daunting tasks in this project was parsing the arguments. Unlike parsing a single string, I had to handle a list of arguments passed to the program, each of which was a string. Designing a robust parser with effective error handling was a significant hurdle.</p>\n<h3 id=\"reverse-engineering-the-original\">Reverse Engineering the Original</h3>\n<p>To understand the intricacies of argument parsing, I delved into the official <code>test</code> implementation, which is written in C. The source code<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup> provided valuable insights that the man page lacked. Reverse engineering the original implementation helped me grasp the nuances of how arguments are processed.</p>\n<h3 id=\"writing-unit-tests\">Writing Unit Tests</h3>\n<p>To ensure the reliability of my implementation, I wrote about 50 unit tests using Zig's built-in <code>test</code> syntax. These tests were based on the official test suite, which is written in Perl—a language I am not familiar with. Despite this, I managed to translate the test cases effectively, ensuring that my implementation was robust and accurate.</p>\n<h3 id=\"impressions-of-zig\">Impressions of Zig</h3>\n<p>Overall, I was thoroughly impressed by Zig. Its syntax is intuitive and consistent, making it easy to pick up. The concepts are straightforward, without being overly dogmatic or coercive (unlike <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Rust_(programming_language)\" data-definition-id=\"rust\" class=\"link definition-tooltip-trigger\">Rust</a>'s borrow checker or <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/C%2B%2B\" data-definition-id=\"cpp\" class=\"link definition-tooltip-trigger\">C++</a>'s rule of 5). Zig's simplicity and flexibility make it a valuable addition to my toolbox for future, more <q>real</q> projects.</p>\n<h3 id=\"the-build-system\">The Build System</h3>\n<p>One of the standout features of Zig is its build system. Gone are the days of <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://en.wikipedia.org/wiki/Make_(software)\" data-definition-id=\"make\" class=\"link definition-tooltip-trigger\">Makefile headaches</a>. Zig's build system is user-friendly, making the development process smoother and more enjoyable.</p>\n<h3 id=\"lessons-learned\">Lessons Learned</h3>\n<p>This project was a fantastic learning experience. It not only deepened my understanding of Zig but also honed my skills in argument parsing, reverse engineering, and writing unit tests. The challenges I faced and the solutions I devised have equipped me with valuable knowledge that I can apply to future projects.</p>\n<p><strong>ztest</strong> is more than just a project; it's a testament to the power of curiosity and the joy of learning. I'm excited to see where my journey with Zig takes me next.</p>","tags":["software","cli","low-level"],"team":[],"technologies":["zig","vs-code"],"title":"ztest"}}