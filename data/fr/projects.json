{
    "s1-01": {
        "title": "Jeu de Sudoku",
        "abstract": "Implémentation d'un besoin client",
        "context": "BUT Informatique 1<sup>re</sup> année",
        "start-date": "16 octobre 2023",
        "end-date": "3 décembre 2023",
        "background": "/portfolio/img/project/s1-01/bg.png",
        "tags": [
            "software",
            "but-realiser"
        ],
        "technologies": [
            "vs-code",
            "c"
        ],
        "anchors": {
            "Dépôt GitHub": {
                "href": "https://github.com/5cover/s1-01-sudoku",
                "id": "github"
            }
        },
        "story": "<p>L'objectif de ce projet était de créer un jeu de Sudoku fonctionnel en langage C, jouable via le terminal de Linux.</p><blockquote><p>L’association « Les têtes à clic » intervient dans les collèges pour familiariser les élèves à l’utilisation de logiciels. Elle développe aussi des petits jeux de société sur ordinateur pour les enfants. Stagiaire dans cette association, vous êtes chargés de développer un programme permettant à un collégien de remplir une grille de Sudoku.</p><footer>— <cite>Sujet du projet</cite></footer></blockquote><p>Pour les connaisseurs&nbsp;: c'est la <strong>SAÉ 2.01</strong>.</p>",
        "gallery": {
            "Maquette (extrait)": {
                "url": "/portfolio/img/project/s1-01/maquette.png"
            },
            "Liste de fonctions (extrait)": {
                "iframe-src": "/portfolio/img/project/s1-01/liste-de-fonctions.html"
            },
            "Algorithme en pseudocode": {
                "iframe-src": "/portfolio/img/project/s1-01/algorithme-pseudocode.html"
            },
            "Cahier de tests (extrait)": {
                "iframe-src": "/portfolio/img/project/s1-01/cahier-de-tests.html"
            },
            "Programme final (extrait)": {
                "iframe-src": "/portfolio/img/project/s1-01/programme-final.html"
            },
            "Tests (extrait)": {
                "iframe-src": "/portfolio/img/project/s1-01/tests.html"
            }
        }
    },
    "2l2w-french-rural-road": {
        "abstract": "Assset de route fraçaise standardisée",
        "anchors": {
            "Article Steam Workshop": {
                "href": "https://steamcommunity.com/sharedfiles/filedetails/?id=2515915993",
                "id": "steam"
            }
        },
        "context": "personnel",
        "end-date": "2 Octobre 2022",
        "gallery": {},
        "title": "2L2W French Rural Road",
        "start-date": "Juin 2021",
        "story": "<p>J'ai toujours trouvé que dans Cities: Skylines, les villes ont un look international plutôt fade et homogène. Où sont le goût, l'émotion, la particularité, toutes ces choses qui font le charme d'une ville&nbsp;? Alors j'ai essayé de reproduire des villes et villages européens, notamment français. Et c'est ce qui a créé le besoin pour une route française, qui respecte les normes réelles pour le marquage au sol et les panneaux. Personne ne l'avait encore fait sur le Workshop, alors je m'y suis mis. J'ai ainsi découvert les bases du texturing et de la modélisation 3D.</p><p>Mettre un pied dans le monde de la modélisation 3D et du game design aura été une expérience enrichissante pour moi, même si je n'en ferai pas une passion.</p>",
        "tags": [
            "3d-modeling",
            "asset-creation"
        ],
        "technologies": [
            "blender",
            "cities-skylines"
        ]
    },
    "tregoria": {
        "abstract": "Un recul sur notre environnement dans Cities: Skylines",
        "anchors": {
            "Publication Instagram": {
                "id": "instagram",
                "href": "https://www.instagram.com/p/CjxQUO3LryP"
            }
        },
        "context": "personnel",
        "gallery": {},
        "title": "Trégoria",
        "start-date": "Octobre 2022",
        "story": "<p>Trégoria, c'est un groupement de communes fictif situé le Nord-Est des Côtes d'Armor. Il est réalisé dans Cities: Skylines, un jeu-vidéo de construction de ville qui permet un niveau de détail et de personnalisation sans limites. Trégoria est avant tout née d'une affection profonde pour mon lieu de vie et d'une attention particulière pour les détails invisibles de notre environnement. Vous savez, toutes ces choses qu'on voit sans voir, les lampadaires, les lignes éléctriques, les bottes de foin dans les champs&hellip;</p><p>Quel est l'intérêt&nbsp;? Certes, Trégoria n'est peut-être pas de l'<em>&quot;art&quot;</em>, du moins pas au même titre qu'un film, un monument ou encore une sculpture. Cependant, Trégoria a un message à faire passer. Lequel&nbsp;? Et bien, partons d'un des villages du groupement. Coatlédan, admettons. Puis, dézoomons. Que voyons-nous? Des champs, quelques maisons, encore des champs&hellip; Ah&nbsp;! Des arbres.</p><p>Il suffit de lever le nez pour s'aperçevoir de ce que l'Homme fait des terres de mère Nature. C'est une véritable domination qui se déroule devant nous. Où cela nous mènera-t-il&nbsp;?</p><p>Trégoria est loin d'être aboutie, mais elle est loin d'être seule. La communauté du jeu créé énormément de mondes porteurs d'un message, d'une refléxion ou d'une interprétation personnelle du réel. On pourrait penser par exemple à <a class=\"link\" href=\"https://youtube.com/playlist?list=PLkBlOw_hzgdfL6Gqw0l9P1TYKn_WIgrd-&si=itRwePkCzQsR8Anr\">MARS </a> par <a class=\"link\" href=\"https://www.youtube.com/@Citywokcitywall\">Citywokcitywall</a>, sur l'inégalité et les dérives du capitalisme. Ou encore <a class=\"link\" href=\"https://youtube.com/playlist?list=PL0vu9rx9cHrUoRedRsFzX367j3DlE_dTk&si=6yuqcFIXm09Jkccv\">Bordertown</a> par <a class=\"link\" href=\"https://www.youtube.com/@twodollarstwenty\">Two Dollars Twenty</a>, sur les l'enjeu géopolitique posé par une ville construite sur la frontière mexico-américaine et les répercussions sur l'architecture, l'urbanisme et les dynamiques sociales.</p>",
        "tags": [
            "art"
        ],
        "technologies": [
            "cities-skylines"
        ]
    },
    "winclean": {
        "abstract": "Application de nettoyage et optimisation Windows",
        "anchors": {
            "Article CommentÇaMarche": {
                "id": "ccm",
                "href": "https://www.commentcamarche.net/telecharger/utilitaires/26935-winclean"
            },
            "Dépôt GitHub": {
                "id": "github",
                "href": "https://github.com/5cover/WinClean"
            }
        },
        "background": "/portfolio/img/project/winclean/bg.png",
        "context": "personnel",
        "gallery": {
            "Fenêtre principale de l'application": { "url": "/portfolio/img/project/winclean/gallery/2.png" },
            "Exécution des scripts": { "url": "/portfolio/img/project/winclean/gallery/1.png" }
        },
        "logo": {
            "isThemedSvg": false,
            "url": "/portfolio/img/project/winclean/logo.png"
        },
        "title": "WinClean",
        "start-date": "Août 2021",
        "story": "<p>Les ordinateurs ne cessent de gagner en puissance et en complexité. Depuis les premières expérences. De nous jours, un microprocesseur bas de gamme effectue plusieurs milliards de calculs par seconde. C'est assez effarant de se dire que l'appareil que vous utilisez pour lire ceci est si puissant.</p><p>Cela dit, nous sommes devenus dépendants des ordinateurs au fil des des années sans forcément comprendre leur fonctionnement réel. Nous démarrons nos appareils, utilisons des logiciels, jouons à des jeux, surfons sur Internet et nous sommes devenus intolérants à tout échec ou latence. Nous nous plaignons régulièrement de la lenteur des ordinateur sans même penser à la complexité de faire fonctionner tout ce qu'ils offrent.</p><p>Est-ce un problème&nbsp;? Devrions-nous supporter ces expériences agaçantes, sans jamais se plaindre&nbsp;?</p><p>Ce n'est pas mon opinion. Nous devrions faire exactement le contraire. Nous avons le droit d'être furieux quand les chose ne fonctionnent pas correctement. Pourquoi&nbsp;? Des milliards de calculs par seconde. Que ne pouvez-vous faire avec ça&nbsp;?</p><p>Soulevez la question, pourquoi faut-il que ça soit si laborieusement lent&nbsp;?</p><p>Mais quel est le responsable&nbsp;? Un mauvais logiciel&nbsp;? Un mauvais matériel&nbsp;? Quelle importance&nbsp;? Nettoyez-le&nbsp;!</p>",
        "tags": [
            "full-stack",
            "oop",
            "software",
            "ui",
            "ux"
        ],
        "technologies": [
            "csharp",
            "github",
            "inno-setup",
            "powershell",
            "visual-studio"
        ]
    },
    "psdc": {
        "title": "Psdc",
        "abstract": "Compilateur pseudocode de l'IUT de Lannion",
        "start-date": "novembre 2023",
        "tags": [
            "software",
            "oop",
            "compiler"
        ],
        "background": "/portfolio/img/project/psdc/bg.png",
        "technologies": [
            "csharp",
            "ebnf",
            "vs-code"
        ],
        "anchors": {
            "Crafting Interpreters": {
                "href": "https://craftinginterpreters.com",
                "id": "website"
            },
            "Creating a Compiler - Pixeled (YouTube)": {
                "href": "https://www.youtube.com/playlist?list=PLUDlas_Zy_qC7c5tCgTMYq2idyyT241qs",
                "id": "youtube"
            },
            "Analyse lexicale - Wikipédia": {
                "href": "https://fr.wikipedia.org/wiki/Analyse_lexicale",
                "id": "wikipedia"
            },
            "Grammaire formelle - Wikipédia": {
                "href": "https://fr.wikipedia.org/wiki/Grammaire_formelle",
                "id": "wikipedia"
            },
            "Analyse syntaxique - Wikipédia": {
                "href": "https://fr.wikipedia.org/wiki/Analyse_syntaxique",
                "id": "wikipedia"
            },
            "Dépôt GitHub": {
                "href": "https://github.com/5cover/psdc",
                "id": "github"
            }
        },
        "context": "personnel",
        "gallery": {},
        "story": "<p>Psdc répond à un besoin. Celui d'automatiser la tâche fastidieuse de traduire des programmes entre différents langages de programmation.</p><p>Au cours de ma formation de BUT Informatique, j'ai appris l'algorithmie avec le Pseudocode, un pseudolangage de programmation inventée pour les besoins de l'IUT de Lannioon. Inspiré du Pascal, le Pseudocode permet d'énoncer un algorithme dans un langage plus proche de celui de l'homme que de celui de l'ordinateur, tout en gardant l'aspect exhaustif de tout langage de programmation.</p><p>Au cours de nos TP, nous avons très souvent dû traduire des programmes en pseudocode vers le C. Cette tâche est assez réberbative, d'où mon désir de l'automatiser. Et c'est ce qui ma mené à découvrir la conception de compilateurs.</p><p>À titre d'exemple, voici un simple programme en pseudocode qui affiche \"Bonjour\" à l'écran&nbsp;:</p><pre><code>programme Afficher Bonjour c'est début\n    écrireÉcran(\"Bonjour\");\nfin</code></pre><p>Voici un programme équivalent en C&nbsp;:</p><pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Bonjour\\n\");\n    return 0;\n}</code></pre><p>Comment automatiser cette transformation&nbsp;? Et bien, en réalité, ce n'est pas si complexe. Le livre <a class=\"link\" href=\"#anchor-1\">Crafting Interpreters</a> métaphorise le problème par l'ascension d'une montagne&nbsp;:</p><figure><img alt=\"Métaphore de la montagne\" src=\"/portfolio/img/project/psdc/mountain.png\" width=\"1824\" height=\"833\" loading=\"lazy\"><figcaption>Robert Nystrom &mdash; &copy; 2015 &ndash; 2021, license MIT</figcaption></figure><p>Commencons avec le code source original, au pied de la montagne. Au fil des étapes (<em>scanning</em>, <em>parsing</em>, <em>analysis</em>), la représentation du code devient de plus en plus haut niveau, c'est-à-dire qu'elle se focalise plus sur la sémantique exprimée que sur les détails d'implémentation.</p><p>Une fois le sommet atteint, on est à mi-chemin de la compilation. On a une vue imprenable sur la sémantique du code, soit le sens que l'utilisateur lui donne à travers la syntaxe de notre langage.</p><p>Alors entamons notre descente. Convertissons successivement notre représentation de haut niveau en des formes se rapprochant de notre objectif final &nbsp;: le langage machine, qui sera exécuté directement par le processeur.</p><p>Je n'ai découvert <em>Crafing Interpreters</em> qu'assez tard dans le projet. À l'origine, je me suis basé sur la playlist <a class=\"link\" href=\"#anchor-2\">Creating a Compiler</a> de <a class=\"link\" href=\"#anchor-3\">Pixeled</a> sur YouTube, où l'on assiste à la conception et à l'implémentation d'un compilateur pour un language <em>ex-nihilo</em> nommé <em>Hydrogen</em> vers l'assembleur.</p><p>C'est dans ces vidéos que j'ai appris les bases de l'<a class=\"link\" href=\"#anchor-4\">analyse lexicale</a>, des <a class=\"link\" href=\"#liens\">grammaires formelles</a>, ou encore de l'<a class=\"link\" href=\"#liens\">analyse syntaxique</a>. C'est vraiment très intéressant et j'apprend beaucoup de choses.</p>"
    }
}