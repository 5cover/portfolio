{"the-goal-of-a-programming-language":{"logo":{"isThemedSvg":false,"url":"/portfolio/img/definition/zig/logo.svg"},"story":"<div>\n    <p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/C_(langage)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a> est le premier langage de programmation que j'ai appris, en <time datetime=\"2017\">2017</time>. Cependant j'ai récemment commencé à apprendre le <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Zig_(langage)\" data-definition-id=\"zig\" class=\"link definition-tooltip-trigger\">Zig</a>. Zig est similaire au C dans ses fondements. C'est un langage de bas niveau, destiné à la programmation système et à l'interaction avec le matériel. Et je suis un grand fan&nbsp;! J'ai implémenté <a class=\"link\" href=\"/portfolio/fr/project/ztest.html\">un clone de la commande <code>test</code> GNU</a> pour me familiariser avec celui-ci. Ce langage résout de nombreux problèmes et limitations du C.</p>\n</div>\n<article id=\"generics\">\n    <h3>Génériques</h3>\n    <div>\n        <p>Les génériques ont toujours été difficiles à faire en C. Il y a plusieurs approches&nbsp;: pointeurs sur vide, macros, passer la taille du type. Mais il y a très peu de garanties d'exactitude et la syntaxe est pénible.</p>\n        <figure class=\"figure\">\n            <pre><code>#include &lt;stddef.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define vector_MIN_CAP 32\n\n#define vector_struct(T) \\\n  typedef struct T##_vector { \\\n    T *buf; \\\n    size_t capacity; \\\n    size_t size; \\\n  } T##_vector;\n\n#define vector_init(T) \\\n  void T##_vector_init(T##_vector *vec) { \\\n    vec-&gt;capacity = vector_MIN_CAP; \\\n    vec-&gt;buf = malloc(sizeof(T) * vec-&gt;capacity); \\\n    vec-&gt;size = 0; \\\n  }\n\n#define vector_get(T) \\\n  void *T##_vector_get(T##_vector *vec, size_t idx) { return vec-&gt;buf + idx; }\n\n#define vector_set(T) \\\n  void T##_vector_set(T##_vector *vec, size_t idx, T data) { \\\n    vec-&gt;buf[idx] = data; \\\n  }\n\n#define vector_push(T) \\\n  void T##_vector_push(T##_vector *vec, T data) { \\\n    if (vec-&gt;size == vec-&gt;capacity) { \\\n      vec-&gt;capacity *= 2; \\\n      vec-&gt;buf = realloc(vec-&gt;buf, sizeof(T) * vec-&gt;capacity); \\\n    } \\\n    T##_vector_set(vec, vec-&gt;size++, data); \\\n  }\n\n#define vector(T) \\\n  vector_struct(T); \\\n  vector_init(T) vector_get(T) vector_set(T) vector_push(T)</code></pre>            <figcaption>Impleméntation d'un vecteur générique utilisant les macros en C<sup id=\"cite-ref-1\"><a class=\"link\" href=\"#ref-1\">[1]</a></sup>. Comme vous pouvez le voir, le code est embrouillé et fragile. L'utilisation serait inutilement verbeuse et pénible.</figcaption>\n        </figure>\n        <p>En Zig, les génériques sont simples comme bonjour. Vous pouvez passer des arguments de types aux fonctions comme citoyens de première classe. Vous pouvez aussi stocker des types dans des constantes.</p>\n        <p>Et pour les structures de données génériques&nbsp;? Définissez simplement une fonction générique qui définit la structure localement en utilisant les arguments de type et qui retourne une instance de celle-ci.</p>\n        <figure class=\"figure\">\n            <pre><code>pub fn Binary(comptime T: type) type {\n    return struct {\n        left: T,\n        right: T,\n    };\n}</code></pre>            <figcaption>Exemple de code Zig pour une structure de données générique (une expression binaire pour un analyseur)</figcaption>\n        </figure>\n    </div>\n</article>\n<article id=\"explicit-and-exhaustive-error-handling\">\n    <h3>Gestion des erreurs explicite et exhaustive</h3>\n    <div>\n        <figure class=\"figure\">\n            <pre><code>printf(\"Hello world\\n\");</code></pre>            <figcaption>Ce code peut échouer. <strong>L'erreur est ignorée.</strong></figcaption>\n        </figure>\n        <figure class=\"figure\">\n            <pre><code>const stdout = std.io.getStdOut().writer();\ntry stdout.print(\"Hello world\\n\");</code></pre>            <figcaption>Ce code peut aussi échouer. Mais le <code>try</code> indique qu'en cas d'erreur, celle-ci est <strong>retournée</strong>. Si nous sommes dans la fonction <code>main</code>, cela fera planter le programme.</figcaption>\n        </figure>\n        <p>Selon la <cite>page de manuel de <code>printf</code></cite>, <q>si une erreur de sortie est rencontrée, une valeur négative est retournée</q>. Cela signifie que pour être correct à 100% et gérer tous les cas d'erreur possibles, nous devons entourer tous les appels à <code>printf</code> (ou toute fonction de la même famille) dans une instruction <code>if</code> et gérer l'erreur de manière appropriée.</p>\n        <p>Mais qui fait cela&nbsp;? La valeur de retour de <code>printf</code> est presque toujours ignorée. La raison est que nous ne savons pas quoi faire quand il y a une erreur. Si <code>printf</code> a échoué, quelque chose doit sérieusement clocher sur le système, et le programme va probablement bientôt planter. Peut-être que nous sommes à court de mémoire ou qu'une panique de noyau est en train d'avoir lieu. Quitter parait être bon un choix&nbsp;; mais ce n'est pas le comportement exprimé quand vous ignorez implicitement la valeur de retour de <code>printf</code>&nbsp;; au lieu de ça, l'erreur est ignorée et le programme continue, comme si rien ne s'était passé.</p>\n        <p>Le modèle de gestion d'erreur explicite de Zig est un indispensable. Il utilise aussi le modèle des <q>erreurs comme valeurs</q> avec les ensembles d'erreurs. Il y a aussi des invariants au moment de la compilation pour que toutes les erreurs soient gérées.</p>\n        <p>L'ignorance n'est plus le comportement par défaut. Ensembles, ascendons et construisons des logiciels plus sûrs.</p>\n    </div>\n</article>\n<article id=\"explicit-number-sizes\">\n    <h3>Tailles de nombre explicites</h3>\n    <div>\n        <p>Zig n'a pas de type entier ou en point flottant dont la taille est déterminée par le compilateur et l'architecture que vous utilisez. Plutôt, toutes les tailles de nombre sont indiquées dans le code&nbsp;: <code>u32</code> pour un entier non signé sur 32 bits, par exemple.</p>\n        <p>Je trouvais cela fastidieux au début&nbsp;; mais ça devient logique en y réfléchissant un peu&nbsp;: <strong>vous</strong> donnez à la variable sa valeur, donc <strong>vous</strong> devriez décider de sa taille, car elle détermine l'intervalle des valeurs qu'elle peut contenir.</p>\n        <p>Il est possible que cette approche explicite eut prévenu l'explosion de la fusée Ariane 5 causée par un dépassement d'entier<sup id=\"cite-ref-2\"><a class=\"link\" href=\"#ref-2\">[2]</a></sup>.</p>\n    </div>\n</article>\n<article id=\"defer-the-best-thing-since-sliced-bread\">\n    <h3><code>defer</code>: la meilleure invention depuis le bouton à quatre trous</h3>\n    <div>\n        <p><code>defer</code> est un concept certes simple mais qui résout beaucoup de problèmes. Il regroupe les instructions logiquement ou sémantiquement liées dans le code, sans pour autant altérer leur ordre d'exécution.</p>\n        <p>Son objectif initial est de simplifier les allocations mémoire, mais il peut être utilisé pour d'autres choses. <code>defer</code> aide à s'assurer à réduire la différence entre la portée et la durée de vie des objets. Au lieu d'avoir à se rapeller de manuellement désallouer la ressource à a fin du bloc, vous pouvez ajouter une instruction <code>defer</code> juste sous l'instruction qui alloue la ressource.</p>\n        <figure class=\"figure\">\n            <pre><code>var i: u8 = 1;\nwhile (i &lt; 100) {\n    defer i++;\n\n    // la valeur de i n'a pas changé\n    // Instructions supplémentaires\n    // ...\n}</code></pre>            <figcaption>Un autre utilisation de <code>defer</code> pour incrémenter un variant de boucle. L'incrémentation est faite au début de la boucle, près de la condition et de la déclaration du variant. Or elle n'est réellement exécutée qu'à la fin du bloc de la boucle.</figcaption>\n        </figure>\n    </div>\n</article>\n<article id=\"a-richer-standard-library\">\n    <h3>Une bibliothèque standard plus riche</h3>\n    <div>\n        <p>La blibliothèque standard du C est plutôt rudimentaire. On a souvent besoin de télécharger une bibliothèque STB<sup id=\"cite-ref-3\"><a class=\"link\" href=\"#ref-3\">[3]</a></sup> quand on a besoin d'un allocateur en arène ou d'une table de hachage.</p>\n        <p>On peut aussi apprendre à implémenter ces structures de données et algorithmes soi-même, ce qui explique pourquoi je pense qu'apprendre le C comme premier langage de programmation m'a aidé à devenir un meilleur programmeur.</p>\n        <p>Zig résout ce problème en ayant une bibliothèque standard plus riche. Cette approche n'est pas unique à Zig. Des langages similaires comme <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Go_(langage)\" data-definition-id=\"go\" class=\"link definition-tooltip-trigger\">Go</a> ou <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Rust_(langage)\" data-definition-id=\"rust\" class=\"link definition-tooltip-trigger\">Rust</a> ont eux aussi des bibliothèques standard riches.</p>\n    </div>\n</article>\n<article id=\"a-standard-build-system\">\n    <h3>Un système de génération standardisé</h3>\n    <div>\n        <p>C n'a pas de système de génération <q>officiel</q>&nbsp;; à la place, on a des systèmes de génération tiers comme <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Make\" data-definition-id=\"make\" class=\"link definition-tooltip-trigger\">Make</a> or <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/CMake\" data-definition-id=\"cmake\" class=\"link definition-tooltip-trigger\">CMake</a>.</p>\n        <p>Le système de génération de Zig est distribué avec le compilateur. Celui-ci utilise une approche déclarative. Ce que j'apprécie particulièrement est qu'il n'introduit pas de nouveau langage. À la place, les commandes de génération sont exprimées en Zig.</p>\n    </div>\n</article>\n<article id=\"namespaces\">\n    <h3>Espaces de noms</h3>\n    <div>\n        <p>Ah, la joie de préfixer chaque symbole dans un programme C pour éviter les conflits de nom avec les utilisateurs de votre bibliothèque&nbsp;!</p>\n        <p>Les espaces de noms sont devenus le standard incontournable des langages de programmation modernes. C'est très utile et idiomatique de manipuler une blibliothèque ou un modules comme ce qu'il est&nbsp;: un sac de noms.</p>\n    </div>\n</article>\n<article id=\"encapsulation\">\n    <h3>Encapsulation</h3>\n    <div>\n        <p>Plus de besoin de préfixer les fonctions internes avec un underscore&nbsp;! <code>pub</code> est tout ce dont vous avez besoin.</p>\n        <p>Plus sérieusement, l'encapsulation n'existe pas en C. Bien que la convention de <q>si ça commence par un underscore, ne pas y toucher</q> se soit répandue depuis un moment maintenant, c'est toujours plus sûr quand le langage impose l'invariant de <q>on ne peut pas accéder à ceci en dehors de ce module / cette structure</q>.</p>\n        <p>En C, il faut être créatif. Pour éviter tout conflit de nom avec des internes de d'autres bibliothèques que l'utilisateur pourrait implémenter, votre préfixe interne ne devrait pas seulement commencer par un underscore, mais aussi contenir une suite de caractères unique (espérons-le). De plus, l'underscore ne devrait pas être suivi par une lettre majuscule, sauf si vous voulez violer le standard et vous exposer à des conflits de nom avec le compilateur ou des internes de la bibliothèque standard.</p>\n        <p>Par exemple, <a class=\"link\" href=\"/portfolio/fr/project/cori.html\">Cori</a> utilise le préfixe <code>_cori_</code> pour les fonctions, macros, structures, alias de type, etc. internes.</p>\n        <p>En Zig, vous n'avez pas besoin de toute cette folie. Privé est par défaut. Exportes des fonctions, des structres et des méthodes avec le mot-clé <code>pub</code>.</p>\n    </div>\n</article>\n<article id=\"if-it-compiles-it-works\">\n    <h3><q>Si ça compile, ça marche</q></h3>\n    <div>\n        <p>Zig est beaucoup, beaucoup plus près de l'idéal de <q>si ça compile, ça marche</q> que le C.</p>\n        <p>Certes, tout ce qui peut être fait en Zig peut aussi être fait en C, mais les invariants et les restrictions que Zig impose sont des choses dont vous n'aurez pas à vous rappeler, comme quand vous codez en C.</p>\n        <p>Pour moi, c'est l'objectif de tout langage de programmation&nbsp;: fournir une syntaxe expressive de sorte à donner autant de guaranties de conformité et de justesse que possible au moment de la compilation.</p>\n        <p>En somme, je pense que le langage C a suivi son cours. Bien sûr, il sera toujours utilisé, car énormément de programmes sont écrits en C, et il serait ridicule d'attendre que tout soit réécrit en Rust ou Zig. Cependant, je ne m'attendrais pas à le voir utilisé pour tout nouveau projet <em lang=\"en\">greenfield</em>.</p>\n        <p>Néanmoins, je pense que le C est un très bon langage à apprendre. Il vous force à quitter votre zone de confort d'abstractions et à faire face au réel défi d'implementer des choses que nous utilisons tous les jours en tant que programmeurs, comme les vecteurs ou les tables de hachage.</p>\n    </div>\n</article>\n<article id=\"conclusion\">\n    <h3>Conclusion</h3>\n    <div>\n        <p>En conclusion, le paysage de la programmation est en constante évolution et bien que C ait été un langage fondamental pendant des décennies, l'émergence de Zig présente une alternative prometteuse. En tant que programmeur, mon parcours a commencé avec C, un langage qui a non seulement façonné ma compréhension des concepts fondamentaux de la programmation, mais a également joué un rôle déterminant dans l'histoire de la programmation informatique. Sa simplicité, son efficacité et sa portabilité en ont fait un langage de choix pour la programmation système depuis sa création en <time datetime=\"1972\">1972</time>.</p>\n        <p>Cependant, alors que nous nous dirigeons vers un avenir où la sécurité, les performances et la productivité des développeurs sont primordiales, Zig se démarque comme un choix solide. La philosophie de conception de Zig, qui met l'accent sur le maintien de la simplicité et du contrôle de bas niveau de C tout en offrant des fonctionnalités modernes pour assurer la correction à la compilation et appliquer des invariants, en fait un choix attrayant.</p>\n        <p>Bien que C ne soit peut-être pas aussi tendance ou riche en fonctionnalités que les langages plus récents, son influence et son importance ne peuvent être sous-estimées. Cependant, la marée semble tourner avec des langages comme Zig, qui offrent le meilleur des deux mondes &mdash; la puissance de C et la sécurité des langages modernes. Alors que nous continuons à rechercher un code meilleur et plus sûr, je m'attends à ce que Zig remplace progressivement C dans de nombreux domaines, offrant une nouvelle norme pour les langages de programmation système.</p>\n        <p>Au final, le choix entre C et Zig dépendra des besoins spécifiques du projet et de la familiarité du développeur. Cependant, une chose est claire&nbsp;: Zig est un langage à surveiller de près, et je suis impatient de voir comment il façonnera l'avenir de la programmation.</p>\n    </div>\n</article>","abstract":"Comment <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/Zig_(langage)\" data-definition-id=\"zig\" class=\"link definition-tooltip-trigger\">Zig</a> résout les problèmes du <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://fr.wikipedia.org/wiki/C_(langage)\" data-definition-id=\"c\" class=\"link definition-tooltip-trigger\">C</a>","title":"L'objectif d'un langage de programmation","gallery":[],"links":{},"references":[{"caption":"Implémentation d'un vecteur générique en C (anglais)","anchor":"website","href":"https://constantsmatter.com/posts/generic-ds-c/"},{"caption":"Vol 501 d'Ariane 5","anchor":"wikipedia","href":"https://fr.wikipedia.org/wiki/Vol_501_d%27Ariane_5"},{"caption":"Dépôt des bibliothèques C STB appartenant au domaine public (anglais)","anchor":"github","href":"https://github.com/nothings/stb"}]}}